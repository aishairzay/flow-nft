// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (8.02kB)
// ../../../contracts/MetadataViews.cdc (10.024kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\x5d\x6f\xdb\xba\xf5\xdd\xbf\xe2\x34\x0f\x9d\x8c\x35\xd6\x06\x0c\x7b\x30\xe2\xa6\x45\x73\x8d\x05\xd8\x35\x8a\xd6\xdb\x1e\x8a\x60\x97\x11\x8f\x63\x22\x12\x29\x90\x54\x3c\xdd\x5c\xff\xf7\xe1\x50\x5f\x94\x44\xd9\xee\x6e\x1f\x26\x14\x8d\x2d\x9e\x73\x78\xbe\xbf\x1c\xc7\xb0\xdd\x0b\x03\xc2\x00\x93\x80\xff\x61\x59\x9e\x22\x08\xfa\x3f\x43\x69\x99\x15\x4a\x82\xda\x01\x83\x75\xaa\x0e\xb0\x51\xf2\x7a\x5d\xc8\x27\xf1\x98\x22\x6c\xd5\x33\xca\x59\x1c\xc3\xbd\x25\x7c\xa9\x2c\xe4\x4c\x5b\x02\xb7\x7b\x04\xb5\xdb\x89\x44\xb0\x14\x8c\x65\x92\x33\xcd\xe1\xb1\xb0\x20\x2c\x30\x63\x8a\x0c\x39\x58\x05\x8f\x48\xf8\x2f\xa8\x4b\x30\x22\x13\x29\xd3\xf4\x76\xaf\x0e\x90\x31\x59\xc2\x66\xbd\x35\x70\x50\x45\xca\x3b\x96\x1c\xed\x44\x69\x84\x5d\x21\x13\xe2\x8f\xa5\xc2\x96\x8b\xd9\x4c\x64\xb9\xd2\x96\x78\x6c\x58\x74\x1c\xc2\x4e\xab\x0c\xae\x16\xf1\xf0\x60\x91\xf0\xe4\xaa\xc1\xfa\x19\x2d\xe3\xcc\xb2\x7f\x0a\x3c\x98\x16\xa5\xf7\xb6\x82\x9f\xe5\xc5\x23\x24\x4a\x5a\xcd\x12\x0b\x3f\x55\x1a\xdb\xac\xb7\xcb\xf1\xc5\xaf\xb3\x19\x00\x00\x21\xbc\x38\xc9\x2c\x4b\xbf\x16\x79\x9e\x96\x4b\xf8\xc7\xbd\xb4\x7f\xfd\x4b\x07\x80\x2f\x24\xdb\xa7\x9a\xee\xbd\x14\x56\xb0\x54\xfc\x8a\x3c\x9a\x0f\x60\xfe\x25\xec\x9e\x6b\x76\x88\x04\x6f\xc8\xbc\x73\x0c\x2f\xe1\x23\xe7\x1a\x8d\xb9\x1d\xa2\xdc\x61\xae\x8c\xb0\x3d\x0c\xab\x7c\xf8\x16\x21\x45\xe2\x22\x4d\xd1\xa9\xf6\xab\x55\x9a\x3d\xe1\x67\x66\xf7\x4b\xf0\xbe\x4c\x80\x7f\x2e\x1e\x53\x91\x54\xd0\xdd\xe7\x1e\xf0\xcf\x42\x5a\xd4\x93\x74\x5b\x58\x8d\x46\x15\x3a\x41\x08\xaa\x76\x71\xbf\x59\x6f\xdf\xf5\x8d\xb6\xf8\x82\x46\xa5\x2f\xa8\xe1\xd5\x51\xf1\x6f\xed\x04\x9f\x8d\xce\x24\xcb\x90\x98\xd0\x42\x3e\x8d\x0e\x39\x9a\x44\x8b\x9c\x84\x9b\x84\xb1\xfb\x22\x7b\x94\x4c\xa4\x23\x08\x96\x24\x68\x4c\x64\x30\xdd\xcd\x1d\xa8\x56\x25\x4b\xad\x40\xb3\x84\x6f\x03\xe6\xdd\x49\xf9\xd0\xf1\x27\xa4\xb0\x51\xfb\xcd\xbd\xe9\xcc\xd7\x7b\xef\x4b\xd0\x3f\x09\xb0\xdf\x07\x18\xf1\xde\x3f\xbe\x80\xdf\x06\x74\xee\xa9\x9d\x1e\x12\x7a\x21\x38\xac\x40\xf0\xf1\x01\xb1\x0c\x2b\xc7\xf9\xf8\xd0\xe3\x1a\x56\xbe\x0c\x63\xd0\x96\x7f\x58\x75\xb2\x8c\xc1\x5a\x39\x60\xd5\xc9\xd4\x82\x1d\xdd\xa7\x9e\x5d\x77\x85\x84\x27\xb4\x4e\xd6\x68\xbe\x84\x6f\xdb\x32\xc7\x87\x81\x88\x1a\x6d\xa1\x25\x7c\xeb\xbd\xa4\x87\x80\x6f\xfa\xfa\xba\x13\x26\x4f\x59\xf9\x3e\x9a\xbf\xbb\x04\xfc\x4b\xc3\xe4\xa5\x08\x9b\xf5\xb6\x8b\x43\x7a\xf5\xbe\x4e\x1c\xcd\xf3\xe0\x89\x3b\x12\x55\x57\xa1\x43\x78\xd1\xbf\xe1\x45\xe0\x61\xe9\x2e\x99\x2f\xe1\xa3\x2c\xbf\x5a\x5d\x24\xf6\x76\x68\xe0\x83\xb0\xc9\xde\x01\x0f\x4e\xe8\x49\x98\xc1\xd3\x7a\x58\x8e\x70\x3c\x9d\x06\x91\xa2\x20\x06\xb4\x11\xd0\x7a\xd6\x58\x63\xcd\xd3\x0b\x88\xa1\xb3\x4d\xa3\x79\x61\xd2\xe7\xec\x6f\xdb\xed\xe7\xb5\x48\x71\x9a\x35\x7a\x0a\x9d\x2e\x07\xfe\x3a\x09\x3f\x0f\x9e\x8c\xdf\x4e\x29\xd8\xf7\x9c\xef\x50\x71\x8b\x36\x2d\x49\x3f\x92\x7e\x27\x9b\x21\x7f\xfd\x0e\x76\x47\xe8\x27\xd8\xf6\x6b\x4d\x57\xaf\x17\xc1\x2a\x37\xed\x02\xb9\x57\xdb\x82\x54\xba\x82\x77\x8e\x48\x87\x53\x45\xd9\xcd\xdb\x20\xc1\x57\xef\x6d\xf7\x71\x78\xe1\x31\x98\x21\xa6\x2e\xfc\xbb\x90\xcf\xc8\xe9\xd2\x1f\x70\xf5\xbb\x51\x59\xfe\x3e\xe6\x12\x8d\xcc\xe2\x4f\x59\x6e\xcb\x0e\x71\x5d\x77\x75\x4b\x88\x28\x33\x51\xf2\xfd\x70\xe2\x9e\x40\xea\xf1\x9f\xda\x79\x6e\xae\x3d\x81\x82\xd7\x46\xe1\xb8\xa3\xe7\x78\x49\x48\x1e\x43\x95\x41\x7a\x71\x5e\x01\x1c\x03\x1d\x8e\xeb\x88\x76\x2c\x41\x98\x56\xf5\xa0\xa7\x21\xcd\xf0\xba\xa9\xb3\xa4\x91\x90\x92\x36\xeb\xed\x3c\x54\xd4\xee\xef\xaa\x92\x56\xb5\x12\x0f\x23\x90\x47\xa5\xb5\x3a\x6c\xd6\x5b\xaf\x5f\x9c\x2f\xe1\x6d\xe8\x82\x09\xe4\x4e\x90\x01\x0d\xcf\x0c\x9b\xf5\x76\x58\x52\x72\x65\x6c\xc0\xa0\x91\x46\x53\xa4\x16\x56\x2b\xd2\xe8\x1c\x7e\xfb\xad\x79\x75\xeb\x3a\x0c\x6a\x31\x26\x92\xc7\xd5\x27\x26\x69\x30\xa9\xd8\xf2\x14\x0c\x1a\x77\xa8\x51\x26\xb8\x74\x13\xc5\xfd\x5d\x33\xb7\x54\xb6\x43\xde\x41\xd0\x74\x23\x64\xa2\xb4\xc6\xc4\x5e\x4d\x98\x7d\xda\xbe\x7e\xb8\x9f\x08\xa6\x71\x93\xfb\x59\xab\x17\xc1\x51\x07\x8e\xbe\x60\x82\xe2\x25\x78\x34\x26\x1c\x6e\x93\x83\x31\x14\xc7\xc0\x45\x35\x55\xe9\x92\x34\x42\xaa\x4a\x94\xdc\x29\x9d\x09\xf9\x04\xce\xd9\x8c\x0f\x4e\x00\x34\x3d\x76\xf2\xda\x32\x47\x38\x08\xbb\xa7\x91\xf2\x97\xca\xf6\xbf\x90\x82\x77\x02\x53\xde\xf3\x18\x1a\x8b\xd4\x41\x22\xa7\x49\x6f\x09\x1f\x5e\x2b\xe8\x40\xc3\xbf\x59\x6f\x8f\xfd\xde\x18\xa2\x60\xcb\xd9\x92\x83\x9b\x6b\x78\x3d\x86\xba\x9e\x38\x76\xec\xd1\x10\x05\x1a\x33\xf5\x82\x6e\xfa\x25\x49\xdc\xe0\x57\x4d\x98\xad\x76\x98\xe4\x50\x01\x09\x4b\xe3\xa9\x3b\x66\x69\x8a\x7a\xe4\xfd\x0d\xd9\xa8\xf9\x70\x7f\xe7\x79\x7f\x30\x44\x07\x32\xb8\x81\xc2\x4d\x8f\x37\xd7\x03\x81\x16\x15\xaf\xd1\x33\x96\x4b\xe8\x2e\x98\xc3\xed\x2d\xe4\x4c\x8a\x24\xba\xca\x84\x31\x64\xa6\xcd\x7a\x7b\x35\x9f\xf5\x08\x63\x26\x06\xb3\xa3\xbb\x66\x21\x78\x33\x3d\xb6\xb7\xe9\xdb\x05\xab\x26\xc3\x01\x8d\x36\x9b\x3a\xd4\x09\xd5\xd6\x79\x09\x2c\x7b\x26\xbd\x3a\xb5\x92\x0a\x19\xe7\x3d\x0d\xb6\x0a\x36\x9e\xcb\xf9\x84\x5a\xa4\x3a\x3e\x6b\x44\xc1\x81\x69\xcd\xca\xff\x2d\x21\x9e\x52\x77\xf5\x81\x99\x37\xf0\xa1\x9f\xa7\x66\x23\x9c\x2e\xab\xd1\xe0\x51\x2b\xb2\x0f\x46\x12\x70\xee\x58\x96\x78\xa8\x89\xd7\x32\x78\x31\x76\xd8\x8b\x64\xdf\xba\xa1\x5b\x9c\xa4\x1c\x94\xc4\xd1\x9d\x2a\xe5\xdb\xb0\x67\x7c\x13\xfc\xa1\x15\x20\x60\x76\x7f\xfe\x27\x7b\xd3\xec\x7f\xde\xda\x1c\x8d\xd5\xaa\x6c\xef\x9d\xb0\x77\x55\x51\x6a\xdf\x70\x81\xe4\xcc\xd3\xa4\x53\x3a\xb3\x7b\x66\x81\x69\x2a\x75\x03\xdb\x5f\x50\x9f\xc2\x43\xd7\x20\x34\x9e\xb1\x34\x13\xfc\xb5\xe5\x8c\x68\x57\x89\xaa\xc9\xeb\x56\x35\x71\x3f\xcd\x58\x1c\x83\x51\x95\x04\x5d\xe0\x43\xc2\x68\x68\x62\x1c\x84\x35\x90\xd5\xf9\xd5\x79\x2c\x01\x34\x6f\xf7\x8a\x9b\xdf\x55\x5e\xc3\xb2\x47\x6f\x03\xe6\x67\x26\x4c\xe2\x76\xfe\xc6\xaf\x51\x3f\xb6\x60\x8b\x5d\xc8\x13\xdf\xb8\x3a\x1d\x28\xe4\x71\x0c\x9f\x5c\xf3\xe5\xbc\xa4\xb0\x7b\xa5\xc5\xaf\xbd\x4a\x4b\x16\x49\x53\x75\x00\xae\x0e\x32\x61\xc6\xfa\xeb\x14\x3f\x18\x34\xee\x60\x35\xa9\x09\xa2\x7d\x5e\x1d\x03\xb5\x12\x49\x0a\xfe\x81\xcc\x83\x7a\x7f\xbe\xcf\x9b\x50\x31\x55\xdf\xa6\xf6\x0e\x94\xfc\x51\x96\x5f\xea\xea\xf9\x1a\x2e\xd6\xc7\x40\xde\x92\x3b\xfb\x43\x54\x40\xb4\xb0\x6b\x8c\x56\x8e\xf0\x39\x45\xd4\x92\x7b\x78\xe4\x80\x17\x08\x12\x52\x54\x9d\x69\x46\x05\xbd\xc9\x40\x7d\x09\xc3\x2d\x57\x1c\xd7\xc3\x4e\xbb\x17\xae\xd3\x8e\x2c\x95\x44\x17\xb0\x2e\x34\xad\xaa\xe7\x0e\x60\x2e\x2f\x23\xcd\x01\xc3\xc0\x6f\x2c\x37\x31\x2a\x5c\x3c\x92\xb4\x05\xb3\xb9\x73\x34\x70\x74\xdc\x7f\x69\xfb\xa7\x8a\x6d\x60\x3c\x13\x12\x94\x06\xa3\x28\x97\x50\x5d\x6f\x96\xe4\xd5\x4e\x5c\x1d\x64\xbd\x44\xaf\x49\xb0\xc7\xd4\x85\x50\x26\xa4\x75\xc2\xb5\xea\x8a\xe3\xe0\x66\xb5\xda\xc6\x36\x8b\xea\x9a\x0a\x61\x93\x41\xe9\xaf\xa9\xb5\x44\xdf\xab\x96\xce\x7d\xbd\xbf\x1b\x16\xea\xa6\xea\xd3\x3f\x59\xf7\xd1\x89\xc8\x05\x12\x0d\xaf\x99\x2a\x5c\x7f\x62\xf7\x28\xb4\xff\xba\xcd\x00\xa3\xe0\xa9\xb9\x89\x06\xde\x57\xd3\x5e\xc2\xdb\xd7\xf3\x53\xe8\xff\xe9\xba\x74\xd8\x2e\xf4\xfc\x72\x18\x70\xd4\x2a\x4b\x74\x75\xac\x73\xa7\x91\x62\xa0\x5e\x13\x7b\x91\xeb\xfd\xec\x30\x1e\xc5\x2b\x5d\x84\x77\x66\x3d\x6d\x9c\x5c\x93\x79\x6a\x69\x3f\x8e\xa1\x3c\xed\x84\xb7\x48\xf3\x91\x46\x4e\x78\xd5\x1f\x0c\xb0\x24\x51\x85\xb4\x3d\x9f\x1a\x3b\x12\xf8\xfe\xb2\x18\x34\x89\x37\xd7\x95\x4e\x07\x57\x87\xd5\x07\xab\xa9\x83\x3f\xd6\xc9\x3c\xfa\xf3\x3c\x9c\x9d\xdc\x32\x7f\xde\x1f\xb4\xba\x1f\x79\x9c\x64\x8e\x1e\x18\x47\xb0\x05\xab\x96\x86\x3d\x16\xfe\xd4\x0b\xd6\xaf\x58\xf5\x25\x64\x42\x0e\x39\xb3\x7b\xd3\x47\x0e\xae\xb9\x60\x05\x71\xbd\x17\x8b\x31\x30\x92\x4e\x91\xe8\x76\x5c\x44\xa1\xca\xb7\x17\x10\x18\xfd\xe8\x13\xbe\xbf\x02\xeb\x89\xd7\xb4\x0b\x5e\xe2\xec\x12\x18\xe5\x1d\xc3\x5e\xb0\x9e\x2a\x6a\x82\x2d\x3a\xd5\x35\x2f\xc5\x9c\x48\xc2\x2d\xa3\xb5\x47\x2d\x88\x6a\x74\x73\xdd\x61\x7b\x3d\x73\x50\xa1\xf3\x1e\xd7\x6d\x20\xd7\x15\x29\x61\x39\x7b\x14\xa9\xb0\x25\xec\x94\x9e\xea\x34\x7b\x1c\xa4\x42\x3e\x4f\x2d\xe7\x2e\x18\xf9\x2f\xdb\xdf\x9d\xdd\x0c\x1c\xdf\x47\xe3\x09\xfb\xfc\xca\xd3\x32\xfd\x84\xf6\x94\xbe\x66\x81\x98\xf7\xcd\x5d\x17\xa6\xef\x31\x75\x56\xa1\xf4\x92\x63\x45\xe6\x8c\x95\x2b\x44\xcf\xc2\x23\x77\xf5\x98\x74\xf3\xd4\xf4\xcf\xb4\xc7\xd9\x71\xf6\xdf\x00\x00\x00\xff\xff\xca\x22\x66\x62\x54\x1f\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0x99, 0xd2, 0x82, 0x56, 0xd2, 0x71, 0x1b, 0x94, 0x93, 0x6a, 0x31, 0x3d, 0x72, 0x21, 0x4, 0x7, 0x4a, 0x8c, 0x1, 0x9f, 0x47, 0x37, 0x43, 0xd8, 0xa1, 0xfa, 0xbb, 0x7, 0xb, 0x84, 0xa3}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x5f\x73\xdc\x38\x72\x7f\x9f\x4f\xd1\xa5\x54\x6d\x49\xde\x11\x69\x5f\x2e\xae\x64\xea\xe6\x2e\x3a\xdb\xda\x53\xca\x76\x54\xf2\x78\xf3\xb0\xb5\x65\x63\xc8\xe6\x0c\x62\x10\x60\x00\x50\xa3\x89\xcb\xdf\x3d\xd5\x0d\x80\x7f\x86\x94\xd6\x7b\xb9\x7d\xf0\x0e\x49\xa0\xd1\xfd\xeb\xff\x0d\xe5\xcf\x9e\x2d\x16\x9b\xbd\x74\x50\x18\xed\xad\x28\x3c\xc8\xba\x51\x58\xa3\xf6\x0e\xfc\x1e\xa1\x46\x2f\x4a\xe1\x05\x38\x2f\x74\x29\x6c\x09\x8d\x35\x8d\x71\x58\x2e\xa4\x86\xeb\xb7\x37\xb7\x97\xcf\x5f\xfe\xf3\xcb\x6c\xb1\xb8\xc3\x6a\x05\x7b\xef\x1b\xb7\xca\xf3\x9d\xf4\xfb\x76\x9b\x15\xa6\xce\x8d\xae\x94\x39\xe4\xfc\xcf\x56\x99\x6d\x5e\x0b\xe7\xd1\xe6\x95\x92\x8d\xcb\xff\xf0\xfc\x0f\x2f\x9e\xff\xdb\x8b\x97\x97\xba\xf2\x97\xe9\xb0\xac\x2e\x17\x8b\x0f\xde\xb6\x85\x77\x20\x74\x09\x16\x9d\x69\x6d\x81\x0e\x0a\xa1\x7b\x16\xc1\x68\x04\x63\xa1\x36\x16\x17\x1d\xa7\xfe\xd8\xa0\x5b\x42\x21\x94\xc2\x12\xee\x25\x1e\x5c\x06\x6f\x44\xb1\xe7\xdf\xfc\x19\x2c\x36\x16\x1d\x49\xb9\x10\x50\xca\xaa\x42\x4b\xf4\xbe\x48\x5d\x82\xa9\x3a\xa9\x97\xe0\xda\x62\x0f\xc2\x81\x80\xc2\xa2\xf0\xc6\xc2\x56\x9a\x9d\x15\xcd\xfe\xb8\x30\x16\x04\xfc\xc7\xed\x9b\x9f\x40\xd6\x62\x87\x50\x49\x85\xd9\xe2\x59\xbe\x58\xc8\xba\x31\xd6\xc3\x75\xab\x77\x72\xab\x70\x63\xbe\xa0\x86\xca\x9a\x1a\xce\xb2\xbc\xf5\x52\x49\x7f\xcc\x47\x5f\xb3\xa2\x2c\xce\xd2\xbe\xf7\x46\xcf\x6f\x3d\xfd\x10\x76\x2d\x9a\x76\xdb\x2b\xf0\x5d\xe4\xfd\x67\x12\x1c\xbe\x2e\x16\x00\x00\x79\x9e\xc3\x15\xdc\xa1\x33\xea\x1e\x2d\xe9\xf0\x5e\x96\xe8\x40\x14\x05\x3a\x07\xde\x80\x00\x87\x7e\x28\x7b\x44\x2e\x6d\x1f\x90\x71\xac\x19\x02\x3e\xe9\x05\xce\x31\xdb\x65\x20\x34\xbc\xbf\xde\x5c\x9c\x28\xc9\x93\x7d\x49\xed\xd1\x56\xa2\xc0\x8e\x8e\x37\x89\x8d\x01\x17\x64\x72\x7c\x2e\xf8\xbd\xf0\x20\x3d\xb8\xb6\x21\x4c\x4e\x18\x21\x89\xbb\xc3\x3b\xda\xbd\x80\x5f\x79\x55\x5a\x59\xb5\x1a\x76\xe8\x19\x91\xf3\x8b\x15\xfc\xb2\x39\x36\xf8\xeb\x64\x89\x0d\xbb\x69\xd9\xf9\x27\x66\x63\x05\xb4\xf2\x62\x05\x57\xfa\x18\xec\xf1\x2f\xbc\xeb\xdb\x1c\xaa\xaf\x8c\x52\x58\x78\x69\x34\x48\x32\x98\x9d\x35\x6d\x43\x88\xb2\xd9\x45\xe2\x96\xa0\x28\xf1\x01\xb6\x47\xb8\x79\xfd\xbb\x84\x1a\xd0\x9f\x8a\xb7\x35\xd6\x9a\x03\xb1\x9e\x96\x9f\xcb\x72\x05\x1f\x6f\xb4\x7f\xf9\xc7\x8b\x15\xfc\xf0\x35\xbd\xff\x36\x07\xcd\xcd\xeb\x00\x4c\x58\xff\xeb\xa9\x90\xaf\xa5\x6b\x94\x38\x06\xb9\xb6\xc2\xc9\x22\xfa\x12\x2b\x49\x17\xaa\x25\x63\x22\xe5\x69\x51\xe3\x12\x4a\x74\x85\x95\x0d\xf3\x2a\x74\xd9\xeb\x7c\xdf\xd6\x5b\x2d\xa4\x82\x8a\x9c\x47\x83\xd9\xfe\x37\x16\x3e\x83\x77\xc6\xf9\xf8\xe0\xc0\xed\x4d\xab\xca\x53\x0b\xa2\x03\xa7\x78\x45\x5b\x4c\x0c\x46\x73\x4f\xe7\x6d\x22\x47\xa4\x05\xe2\x2e\x1d\x37\x5c\x74\xb2\x41\x3a\xa8\x24\xaa\x12\x0e\x52\x29\xd8\x22\x94\x81\x34\x96\x20\x35\x28\xe9\x62\x48\xf2\x7b\xb4\x58\x19\x8b\x91\xdd\x11\x99\x2d\xbf\xb5\x9e\x44\x2c\x8c\x2e\xa4\xc3\x6c\xf6\x4c\x12\x41\xa1\x67\x26\x57\xf0\xc1\x5b\xa9\x77\x63\x11\xae\xe0\x60\xa5\xf7\xa8\x47\xa0\xfe\xa3\xe4\x11\x50\xa2\x17\x32\x05\xca\x31\xdd\xe5\x88\x94\x33\xec\xd7\x5b\xe4\x70\x0b\xf7\x68\xb7\xc6\x75\x9e\x0f\x8d\xb0\x82\xe3\x22\x48\xed\x3c\x0a\x8e\xa3\x02\x9c\xd4\x3b\x85\xa0\xa4\xc6\x8b\xa7\x21\x18\x88\xf7\x18\x12\xae\x16\x4a\x0d\x8c\xa8\x8b\xe2\x62\x06\x94\xef\xc1\x24\x5a\xda\x16\x41\xc0\x01\xb7\x97\x95\x95\xa8\x4b\x75\xe4\x50\x0e\xe7\x32\x43\x8e\xef\x4b\xb8\x7d\xff\xd3\xc5\x88\x08\x5b\x7e\xc4\x63\x6a\x21\x4b\x12\xf8\x0b\x34\x16\x39\x98\x2d\x01\x7d\xf1\xb4\xf4\x9d\x50\x83\x58\xf3\xf5\x5a\x2a\xfc\xd6\x83\x20\xb5\xf4\xe7\xdd\x13\xfd\x37\x34\x9b\xe5\xe8\xcb\x0c\x9a\xe3\x05\x4f\x1c\x98\x96\x5c\x0c\xe2\x0c\xfd\xe7\x50\x55\x19\xbb\xd3\x9a\x4f\x9e\x7e\x1c\x9a\xe8\x7a\xc8\xc3\x74\x69\xaf\xc5\x75\xcf\x4b\xb7\xec\xdb\x69\x04\x22\xce\x62\x58\x45\x8d\x56\x16\x83\x00\xc9\xba\xe8\x33\x3a\x88\xa0\x3e\xe7\x8d\xc5\x12\xc8\x30\x2c\x98\xaa\x82\x62\x2f\xa4\x9e\x26\x34\x22\xed\x92\x2e\x5b\x87\x25\x25\x22\x8b\x5c\x12\x50\xc9\xc1\xc9\xdd\x2d\x81\x52\x95\x09\xce\x6f\xc8\xfb\xa1\xc6\x52\x8a\x47\x43\x52\xcf\x1f\xf3\x3e\x0d\xd9\xad\x95\x14\x73\xa3\xa9\x9f\xc8\xfb\xb7\xcd\xe6\xb6\x97\x99\xe5\x09\xc1\x36\xe5\x6c\xaa\x01\x40\x70\x84\xa1\xb5\x70\x6e\x2c\xff\xf8\x70\x01\x1f\xef\xde\xc6\x90\x30\xc3\x56\x22\xbc\x9a\x63\x8b\x2c\xb1\xb5\x6a\xea\x7f\x6c\x7a\x83\x2f\xb3\xa6\xd1\x5a\x52\x66\x6b\x87\x6a\x7c\x5a\xea\x13\x2a\x16\x7d\x6b\x75\x47\xec\x71\x6b\xb8\xb9\xbd\xfe\xc0\xec\x87\x1d\x04\x51\x6f\x4f\xb1\x18\x1b\x26\x98\x6e\x63\xb4\x09\x2a\xe8\xf4\xa0\x6a\x23\xc7\x25\x9a\x53\xe3\xa0\xb7\xd1\x02\x40\x58\xec\xed\xa2\xa4\x0c\xee\xf7\x28\x2d\x97\x5e\x94\xa6\x64\x89\xda\xcb\x4a\xa2\x85\xf3\x57\x37\xaf\x2f\x3a\x22\x56\xb0\xbd\xf8\xbd\xe0\x88\x2b\x2d\x16\x1e\x3e\xde\xdd\x64\x70\x05\x85\x92\xb4\x57\x34\x8d\x92\x45\x88\x63\x64\x8a\xad\xc3\x90\xf6\x5e\xdd\xbc\x1e\x96\x4c\x15\x55\xa8\x64\x82\xca\x08\x4e\x42\x51\x8a\x7b\x29\x48\x24\x66\x77\x27\x3c\x1e\xc4\xf1\x51\xcb\x4c\xe8\x75\x26\x30\x8a\x6c\xaf\x6e\x5e\x93\x95\x11\xe9\x19\xc1\x08\x56\xe6\x8b\x4f\x0a\x15\xef\x60\xf7\x88\xd2\xa8\x23\x28\x4d\xe1\x32\xd9\x54\x2e\x93\x26\xa7\x9c\x88\x8d\x77\x79\x3c\xe1\x52\x94\xa5\x25\xa3\xd6\xbb\xfc\xc9\x30\x59\x50\x51\x33\x97\x1c\x6e\x85\xdf\xb3\x73\x68\x30\x1c\x71\x84\x82\x86\xde\xc5\xa2\xb2\x0a\xd6\xd2\x15\x57\x1d\x58\x41\x1b\xc6\x1e\xbf\x2b\x61\x48\x07\x46\xab\x23\x68\xc4\x92\xe2\x7d\xd5\x13\xe7\x22\xd7\x71\x39\xfb\x3d\x44\xbf\x03\x1c\x22\x7b\xe9\x8e\xce\x63\xed\x9e\x86\x85\x24\x4d\xb8\xfc\xe5\xc4\x6b\x07\x90\x2d\xc7\x0b\x67\x9d\xb8\x90\x25\xac\x09\xe7\xe9\x27\xc6\x73\xcd\x34\xe6\x3c\xbc\x87\xaa\xd5\xa1\x4c\x4d\xde\x49\x18\x31\xd8\x5a\x78\x79\x8f\x14\xa0\x7a\x43\xfa\x7b\x6d\x68\x6f\x0e\x97\xde\xe4\xd1\x72\x2e\xe9\xf5\xa5\xd1\x97\x07\xdc\xe6\xff\x14\xce\xb9\x6c\xad\x72\x8f\xe2\xf6\x5b\xc1\x48\x56\x1d\xb4\xb0\x1e\x00\x30\x5e\x05\x7d\xd8\x3a\x23\x16\x56\x79\x7e\x96\x91\x06\x85\x3f\x4f\x78\x5e\xa4\x17\x67\xf9\x59\xf7\x9b\x68\x5d\x8c\x48\x0d\xa0\xfc\x2e\xaa\x8f\x84\xc7\x67\xfc\xbf\x67\x00\x77\xe6\x28\x94\x3f\x02\xb7\x3d\xe9\xe5\x6b\xac\xa4\xc6\xe4\xde\x75\x63\x9c\xa0\x44\x62\xe3\xda\xae\xcb\xe7\x64\xb3\x93\xf7\xe8\xa0\x16\xf6\x0b\xfa\x46\x09\x4a\x86\x02\x5a\x4d\x91\xa0\x3c\xe9\xe8\x9e\x01\x79\x5a\x6c\xd6\xa8\x0b\x8c\x24\x25\xc6\xce\xad\x63\xeb\xdd\x90\x1c\x85\xba\xff\x69\xd1\x1e\x83\x2d\x7c\xbe\x4b\x9b\x3e\xa7\x60\xc5\xad\xef\xfb\xeb\x8d\x83\x44\x80\xa2\x1f\x85\x62\x7c\x68\xb0\xf0\x21\x5d\x37\xe2\xd8\x1f\x48\x1d\x4a\x48\xfc\x7e\x8f\x0e\xc1\x35\x58\xc8\x2a\x46\xd7\x31\x3b\x93\xd8\xd8\x31\x70\x1a\x16\xaf\xac\x15\xc7\x00\x0b\xf5\xd9\x5f\x02\x84\x52\x97\xf2\x5e\x96\xad\x50\xfd\xf1\xdd\xb6\x90\xa8\x59\x61\x17\x21\x7a\xb5\xfe\x46\x57\xc6\xad\xe0\x97\xa8\x9c\x5f\xc7\x09\x92\x1d\xf6\xd3\xdc\xba\x53\x5f\xcd\x73\xf8\x59\x28\x59\x0a\x1f\x0b\x03\xd7\xd6\x5c\x71\x2b\x45\xdb\xa1\x6e\x95\x97\x8d\x92\xd4\x70\xc6\x2a\x57\x1b\x4f\x15\xce\xce\xa2\xf0\x29\x1b\xbd\xc8\x9e\x8f\xc8\xde\x0b\x0b\xde\x78\xa1\x5e\xb5\x1e\xd6\xf0\xfc\xe4\x33\x39\x6d\x32\x15\xa9\x3b\x3e\x67\x7c\x62\x40\xa4\xfb\xf9\x63\xda\x9b\x15\xad\x3f\x31\xfd\xe1\x93\x70\x0e\xad\x3f\xef\xf6\xfd\x69\x4d\x7c\x2e\xa1\x46\xe7\xc4\x0e\x57\x70\xf6\x21\x08\xdb\x9d\xff\xfd\xd2\x9e\x5d\x9c\xc2\x78\xe5\x9c\xdc\xe9\xe0\x10\x91\xde\x4c\x54\x4c\x27\xad\xa7\x8b\x4e\x42\xe0\x5d\xf0\xdb\x21\x3d\x6e\x0a\xe6\xda\xee\xce\xda\xb8\xf9\x4e\xba\x7e\xa2\x2a\x9a\x39\x1c\xc6\xa5\x51\xa8\xe4\xd9\x19\xa9\xd6\x89\xfd\x9d\x1b\x75\x63\x49\x85\x64\x28\x5c\x27\xb1\xa7\xf3\xf0\x66\xde\x1f\x26\x8d\xf5\x4f\xb1\x08\x1f\x8f\xa9\xee\xb0\x40\x79\xdf\x55\x09\x08\x5b\xd4\x58\xc9\x42\x0a\x7b\x4c\xdd\x59\x3c\x7b\x5c\x72\x08\x46\x23\xd5\x1c\x85\x45\xb2\xea\x63\xd3\xf5\xed\x36\x11\x3e\x48\xbf\xef\x9e\xb2\x1d\xfa\xcd\xb1\xc1\xf3\x8b\x13\x05\x14\xa6\xae\x51\x97\xa1\x9a\xba\x84\x8f\x6e\x60\x17\x3c\xc6\xa3\x1c\xad\xf1\x10\xba\xb4\x80\xc0\xb5\x32\x87\x20\x85\x1d\x4b\x21\x1d\xb4\x84\x1b\x7c\xee\x14\x76\x4c\x82\xde\xb6\x5b\x25\x0b\xaa\x3d\xce\x2f\x3e\x8f\xdb\x65\x8a\x52\x64\x83\xa1\x90\x23\x3d\x54\xa2\x55\x7e\xe6\x9c\x6c\x9a\x41\xb9\x57\x17\x4a\x99\x03\xed\xb7\x3c\x1a\x6b\x9b\xe8\xec\x08\x85\x68\xc4\x96\x87\x88\xe4\x85\x5c\x81\xb4\xbe\xb5\xc8\xcb\x1c\x09\xc7\x2d\x7a\xea\x94\xfa\xe5\x93\xc2\x21\xf1\xb0\x82\x57\xdd\xa2\x3f\xfd\x70\xa5\x8f\x77\xb1\x54\xfa\x3a\x9e\x37\x26\xc1\xbf\xfd\x79\x6c\x0f\xef\x3a\x07\xec\x3a\xa8\x42\xa8\xa2\x55\x89\x65\x51\x9b\x56\xf3\x7c\xd1\x09\x85\x70\x2f\x54\x8b\x14\x48\xb5\xab\xd0\xda\xd8\x73\x45\x5b\x9b\x07\xe6\xbd\xf1\x08\x97\x70\xe3\x07\x5d\xfb\x16\xfd\x01\x51\x53\x9c\x62\xc0\x5f\x64\xcf\x47\xb3\x10\x78\xf3\x40\x5b\x82\x11\x0d\x0e\x96\x0e\x1e\x78\x43\x1f\x38\xe8\xdd\xf3\xec\x5f\x5e\xd2\x52\x3d\xb4\xd4\xb8\xe5\x90\xce\xe4\x45\xcf\xe0\xe1\xf1\x9a\x85\x9d\x43\x28\x75\x84\x06\x6d\x81\xda\x53\x81\xbe\xc3\x41\x8f\x1a\x46\x05\x1e\x6d\xcd\x8e\xb9\x15\x4e\x3a\x68\x8c\xd4\x7e\x54\xaf\xd0\x22\x67\x94\x2c\x49\xd3\x21\xa9\xb9\x5a\x58\xdf\x0d\x7b\x1d\x1c\xf6\x54\x7b\x16\xa2\xa4\x9e\x84\xba\x5c\xb2\x96\xcf\x1f\xaf\xe5\xc3\xcb\x3f\x7e\x0e\x99\x41\x28\x8b\xa2\x3c\x76\x93\xd4\x93\x39\x06\x8e\x8e\x67\xfb\x29\x84\x23\x6c\x0b\x41\x0f\xd2\x3b\x30\x0d\xda\x90\x3d\xc7\x36\x4e\x59\x58\x7b\x69\x51\x1d\x29\xd0\xa0\xad\xa5\x96\xce\xc7\xee\x7c\x87\x76\xb0\x93\xf1\x4e\x05\x42\xdb\x90\xc2\xff\x35\x1d\x6a\x2a\x68\x2c\x16\xd2\x49\xa3\xb3\x69\xd1\xdf\xfa\x15\x04\x91\xc6\x56\xf7\x9f\xa9\xd2\x1f\x4d\x3b\xc2\x7d\x46\x68\xe7\x83\xb7\x90\x18\x74\x84\x38\x92\x1f\x0f\x74\xbb\x9c\x60\x61\x51\x05\x76\xf7\xb2\xe9\xcc\x8b\x3e\x7c\x3e\x08\xa5\xd0\x7f\x4e\xc3\x3f\x0a\x96\x4b\xe0\x26\xf3\xe8\xf7\x44\x17\x95\x8b\xb9\x98\xa7\x50\x07\x8d\x16\x6a\xb9\xdb\x7b\x38\x08\x1d\x22\x32\x17\x22\x53\x2f\x7c\x72\xf4\xc5\x35\x01\xb9\x44\x43\x8d\xe2\xef\x77\xd4\xe5\x10\xbf\xe5\xdc\x59\xa7\xb5\x45\x63\x71\x26\xa3\x53\xb2\xf8\x33\x97\x04\xf0\xc3\x0f\xfc\x14\xf2\x32\xac\xe0\x8c\xb2\x74\x70\x93\xde\x37\xa5\xa6\x57\xb2\x04\x2b\xf4\x0e\x41\x66\x08\xbf\x3c\x5f\xbe\xf8\xf5\xec\x89\xcc\xcf\x39\xae\x8b\xbf\x6b\xe8\xc4\x9e\xcd\xc8\x21\x19\xff\x3d\x53\xa8\x49\xd6\xfc\x29\x66\x9f\xd0\x32\x72\x3d\xd5\x09\xc2\x01\x8d\x2b\x1f\x66\x8c\x54\x3d\xae\xf5\xba\xb0\xcd\xb3\x9a\x9e\x04\x47\x71\xbc\x47\xed\x5b\x8e\x06\x43\x5a\xfd\x1c\xcb\x1d\xa4\x2f\xf6\x5b\x43\x55\x77\x12\x7d\xd9\xd1\xdd\xb3\x5f\xa7\xc9\x3a\x6c\xdb\x48\x96\xbb\xd0\x11\x73\x5d\xe1\x4a\x4f\xda\xc4\x59\xf9\xa4\xd8\x98\xcd\x5d\x2b\xe8\x9f\x06\xaa\x8f\x95\x47\xde\xf0\xc7\x3c\x26\xfd\xeb\x4d\x22\x31\x46\x11\xae\xe2\xa5\x80\xe9\x03\x1d\xbc\xc3\x52\x8a\x65\x1a\x61\x71\xfa\xe6\x99\xb8\xb5\xe8\x1a\x23\x4b\x42\x93\xe7\x68\x94\xc8\xb3\xd3\xea\x83\x77\xcf\xcc\xa8\x2a\x9e\x5e\x3c\x3a\x28\xcd\xf3\x40\xf3\x92\x6b\x88\xc2\xd4\xe8\x62\x37\x40\xe0\x70\xe9\x48\x5f\x72\xd7\x6e\x79\x85\x70\xd1\x4a\xb6\x58\xc2\x1e\x2d\xf6\x1d\x27\xde\xa3\xa2\x18\x96\xd5\xe6\x7f\xa5\x52\x22\x33\x76\x97\xa3\xbe\xfc\xf8\x81\xbb\xd1\xfc\xbf\x70\x9b\xff\x6d\xb3\xb9\xcd\xff\x2a\x9c\x2c\xdc\x27\x53\x7d\xe2\xc7\x77\x37\xef\xde\x7c\xe2\x9b\xc8\x09\xf3\x9d\xb8\x8f\xf8\xfa\xac\x70\xcb\xe9\xb6\xb1\xdb\xb2\xe5\xd3\xd6\x35\xfd\x73\xfa\xa1\xdb\xbc\xee\x7e\x3d\xe6\x0c\x70\x05\x4a\x16\xa8\x1d\xdf\xcb\x19\xcb\x2a\xf2\xa6\x83\xc4\x35\xe5\x03\xa3\x10\x57\xb9\x34\x2c\x4b\xfb\x37\xe9\xb6\x66\x34\x53\x8d\xa3\x92\x34\x52\xa2\x72\x94\x0b\x4e\x72\x9a\x48\xa9\x8c\x53\xcb\x81\x01\xbc\x8d\x9c\x4c\x4d\x80\xd8\xb8\xe9\xe6\x52\x8f\x40\xf9\x69\x30\xba\x7a\x72\x74\x39\xa6\x06\xeb\xc1\xbe\x27\x70\x4a\xe6\x8e\x0f\x8d\xe1\xb2\xeb\xe3\xdd\xdb\x30\x70\xa2\x60\xe0\xb1\x06\xbe\xff\x02\x7c\xf0\x68\x29\x4f\x39\xe9\x31\x9b\x83\x6b\x88\xd4\xf6\x38\x9c\x06\x12\x3a\x5f\x10\xb2\x6e\xf0\xf7\x57\x65\x0a\x3a\xc3\xa4\x41\x62\x57\x21\x72\xda\xb1\x72\x27\xe9\xa8\xbe\xb4\x65\x98\x27\xae\xf5\x26\xf2\x44\x2c\xff\x9e\x21\xf0\x27\xf8\x8e\x31\xf0\x7a\x76\x7a\xfb\x28\x70\xa1\x93\x26\xd7\x0c\x25\x7b\x9c\xae\x85\x06\x26\xdc\xff\x7b\x2b\xf1\x1e\xa3\x30\xbf\x17\x41\x4a\xbd\xe8\xdb\x06\x04\x5b\x5c\xd1\x5f\xa4\x72\x40\x6a\x2c\x79\x38\x1f\x47\x95\x1a\x1d\x18\x22\x5e\x5f\x39\x77\x63\x8c\x01\x82\xef\xaf\x37\xfd\x95\xec\xcf\x24\xd1\xd7\x61\x04\x0a\x13\x49\xdd\x91\x3d\x70\x60\x61\xd3\x88\x66\x6f\x53\xa3\x12\xca\xdf\x6d\xba\xb2\x98\x56\x40\x91\xc6\x6d\x9c\xde\x75\x0f\xa3\x90\x17\x42\x78\xc8\x3f\x87\xbd\x2c\xf6\x83\x1c\x46\xd6\x10\x4e\x89\x90\xcf\x08\x18\x9a\xad\xc0\xde\x74\xc2\xd8\xe5\x87\x61\xae\x98\x3b\x7f\x80\x2e\x07\xd7\x74\x6d\x31\x1c\xd7\xf4\x1c\xc5\x6a\x49\x54\xc6\xf2\x5d\xaf\x34\x1a\x3b\xf8\x47\x93\xc6\xd8\x53\x75\x7f\xba\xe0\xda\x8a\x5a\x4b\x1e\x9e\x77\x7f\x3f\xd0\xcd\xaf\xd2\x0c\xd2\xf1\x2d\x5e\x06\x25\x36\xc6\x49\x0f\x3f\xc6\xdb\x6e\xf8\x31\x5e\x99\xbf\xbf\xde\x0c\xdb\xc7\x2e\x91\x6b\xb2\x46\xca\xda\x02\x2c\x3a\x6f\x65\xe0\x9d\x24\x0a\x59\x2c\x35\xd3\xdd\x1c\x6c\xaa\xb6\x20\x46\x6f\x24\xe1\xcf\x09\x46\xa0\x6d\x3a\x88\x26\xca\x1a\x40\x33\x8b\x4c\x36\xc3\xeb\x90\xf4\x2c\xdb\xb5\xd0\xc7\x9e\x65\xf7\xdb\x3c\xbf\x65\x66\x42\xde\x99\x70\x7f\x9d\x26\xbd\xb1\xd1\x50\xe6\xe0\x42\x87\x1d\xef\x63\x29\xf8\xd5\x8d\x3f\x9e\xfa\x5d\x32\x0a\xe2\x24\xd9\x3f\x1b\xff\x90\x7a\x32\xc6\x99\x8e\x80\x9b\xf8\x37\x44\xb9\xe7\x34\x31\xb3\x82\x73\xaa\x68\xfe\x7d\xf2\xc7\x32\xfd\xd2\x8b\xa7\x2e\x55\x1f\x73\xb6\xf1\xfd\xe9\xbc\x43\xcc\xad\x39\xd5\xff\xd3\x6b\x4e\xf1\x1e\xaf\xfe\xff\x0b\x9e\x28\xcd\xa7\xc1\x5e\xda\xf5\xe0\xf7\x74\x61\x2f\xfd\xba\xff\xf9\xd8\xb2\xfe\xf8\xf5\xe9\x8b\xdf\xde\xd2\xe3\x31\xd9\xdc\x7f\x9a\x69\x0f\x9e\x02\x6a\xfd\xe4\xd7\x49\xe2\xfa\xb6\xf8\xbf\x00\x00\x00\xff\xff\x50\x65\xe0\xc3\x28\x27\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x11, 0x35, 0x4a, 0x15, 0x25, 0xe6, 0x93, 0x3e, 0x49, 0x25, 0xd8, 0xdc, 0xdc, 0x2b, 0x11, 0xe4, 0xad, 0xcf, 0x49, 0xab, 0x53, 0x41, 0x30, 0xea, 0xb9, 0xad, 0x13, 0x1e, 0x26, 0xe0, 0x75}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
