// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (8.017kB)
// ../../../contracts/MetadataViews.cdc (9.195kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xd8\xea\x21\x27\x4d\x63\x31\x69\x93\x5c\xcb\xb1\xea\x64\xe2\x6a\xce\x0f\xf1\x64\x12\xdd\xf5\x21\x93\x49\x21\x62\x65\x61\x4c\x02\x3a\x00\x94\xc2\xba\xfa\xee\x37\x0b\xfe\x03\x49\xd0\x76\x2f\x2f\xd5\x64\x62\x89\xd8\x5d\xec\xfe\xf6\x2f\xc0\x28\x82\xf5\x4e\x18\x10\x06\x98\x04\xfc\xca\xb2\x7d\x8a\x20\xe8\xff\x0c\xa5\x65\x56\x28\x09\x6a\x0b\x0c\x56\xa9\x3a\xc2\xb5\x92\x67\xab\x5c\xde\x88\x4d\x8a\xb0\x56\xb7\x28\x27\x51\x04\x57\x96\xf8\xa5\xb2\xb0\x67\xda\x12\xb9\xdd\x21\xa8\xed\x56\x24\x82\xa5\x60\x2c\x93\x9c\x69\x0e\x9b\xdc\x82\xb0\xc0\x8c\xc9\x33\xe4\x60\x15\x6c\x90\xf8\x0f\xa8\x0b\x30\x22\x13\x29\xd3\xf4\x74\xa7\x8e\x90\x31\x59\xc0\xf5\x6a\x6d\xe0\xa8\xf2\x94\xb7\x2a\x39\xd9\x89\xd2\x08\xdb\x5c\x26\xa4\x1f\x4b\x85\x2d\x16\x93\x89\xc8\xf6\x4a\x5b\xd2\xb1\x56\xd1\x69\x08\x5b\xad\x32\x98\x2e\xa2\xfe\xc2\x22\xe1\xc9\xb4\xe6\x7a\x87\x96\x71\x66\xd9\x7f\x04\x1e\x4d\xc3\xd2\x79\x5a\xd2\x4f\xf6\xf9\x06\x12\x25\xad\x66\x89\x85\x5f\x4b\xc4\xae\x57\xeb\x78\xb8\xf1\xdd\x64\x02\x00\x40\x0c\x07\x67\x99\x65\xe9\xc7\x7c\xbf\x4f\x8b\x18\xfe\x7d\x25\xed\xab\x17\x2d\x01\x1e\xc8\xb6\xb7\x95\xdc\x2b\x29\xac\x60\xa9\xf8\x03\xf9\x6c\xde\xa3\xf9\x4d\xd8\x1d\xd7\xec\x38\x13\xbc\x16\xf3\xd4\x29\x1c\xc3\x1b\xce\x35\x1a\x73\xd1\x67\xb9\xc4\xbd\x32\xc2\x76\x38\xac\xf2\xe9\x1b\x86\x14\x49\x8b\x34\x45\x07\xed\x47\xab\x34\xbb\xc1\xf7\xcc\xee\x62\xf0\x7e\x8c\x90\xbf\xcf\x37\xa9\x48\x4a\xea\xf6\x7b\x87\xf8\x9d\x90\x16\xf5\xa8\xdc\x86\x56\xa3\x51\xb9\x4e\x10\x82\xd0\x2e\xae\xae\x57\xeb\xa7\x5d\xa7\x2d\x3e\xa0\x51\xe9\x01\x35\xdc\x39\x29\xfe\xae\xad\xe1\x93\xc1\x9a\x64\x19\x92\x12\x5a\xc8\x9b\xc1\x22\x47\x93\x68\xb1\x27\xe3\x46\x69\xec\x2e\xcf\x36\x92\x89\x74\x40\xc1\x92\x04\x8d\x99\x19\x4c\xb7\x73\x47\xaa\x55\xc1\x52\x2b\xd0\xc4\xf0\xa9\xa7\xbc\x5b\x29\x3e\xb7\xfa\x09\x29\xec\xac\xf9\xe5\x9e\xb4\xee\xeb\x3c\xf7\x2d\xe8\xae\x04\xd4\xef\x12\x0c\x74\xef\x2e\x3f\x42\xdf\x9a\x74\xee\xc1\x4e\x1f\x32\x7a\x21\x38\x2c\x41\xf0\xe1\x02\xa9\x0c\x4b\xa7\xf9\x70\xd1\xd3\x1a\x96\xbe\x0d\x43\xd2\x46\x7f\x58\xb6\xb6\x0c\xc9\x1a\x3b\x60\xd9\xda\xd4\x90\x9d\xdc\xb7\x8e\x5f\xb7\xb9\x84\x1b\xb4\xce\xd6\xd9\x3c\x86\x4f\xeb\x62\x8f\x9f\x7b\x26\x6a\xb4\xb9\x96\xf0\xa9\xf3\x90\x3e\x44\x7c\xde\xc5\xeb\x52\x98\x7d\xca\x8a\x5f\x66\xf3\xa7\x8f\x21\xff\x50\x2b\xf9\x58\x86\xeb\xd5\xba\xcd\xc3\x76\xb3\x0e\xeb\x67\xcf\xe2\x81\xb5\xba\xcc\x1e\x92\x36\xfb\x02\x07\x81\xc7\xd8\xed\x33\x8f\xe1\x8d\x2c\x3e\x5a\x9d\x27\xf6\xa2\xef\xe3\xa3\xb0\xc9\xce\x11\xf7\x56\xe8\x93\x30\x83\xf7\x43\x11\x0f\x78\x3c\x58\x83\x4c\xb3\x20\x07\x34\x49\xd0\x04\xd7\x10\xb4\xfa\xd3\xc9\x89\x7e\xbc\x8d\xb3\x79\x99\xd2\xd5\xec\x5f\xeb\xf5\xfb\x95\x48\x71\x5c\x35\xfa\xe4\x3a\x8d\x7b\x21\x3b\x4a\x3f\x0f\xae\x0c\x9f\x8e\x01\xec\x07\xcf\x5f\x80\xb8\x61\x1b\xb7\xa4\x9b\x4c\xdf\xa8\xe6\x48\xc8\x86\x35\xa6\xea\x99\x21\x17\x0c\x96\x3d\xb5\xdf\xd1\xd3\x71\x95\xb7\x22\xc5\x6f\x70\xd9\x74\x67\xed\xde\xc4\x51\xc4\x8c\x41\x6b\x16\x47\xdc\x18\x61\xf1\x8c\xc4\x9a\x45\xa2\xb2\xe8\xe5\xf6\xd5\x0f\x3f\xbf\x48\x9e\x25\xff\x64\x3f\x25\x9c\xbf\x7a\xf1\xe3\xe6\x79\xf2\xd3\x0f\xcf\x7a\x0b\xec\xe5\xcb\x64\xf3\x3c\xf9\xf9\xc7\x57\x5f\x68\x94\xfa\xf2\x9b\xd2\x3c\x63\xfa\x76\x61\x0e\x37\xd3\xf1\x50\x18\x0f\x48\x87\x06\xc1\x1a\xc3\x54\x64\xec\x06\x23\x73\xb8\xf9\xfe\x6b\x96\x86\xa5\x85\x83\x2a\x18\x08\x21\xc7\x3c\x94\x78\xd3\xf5\x0e\xeb\x69\xc8\x9b\x08\xa6\x8f\xcc\xc3\xa9\x9b\x42\x93\x86\x8f\x06\xca\xdc\x20\x07\xd6\x19\x4c\x69\x38\xc4\x74\x0f\x85\xca\x81\xe3\x01\x53\xe5\xbe\x6b\x90\xf8\xd5\x56\x23\xea\x6a\xbd\xb8\x67\x57\xf3\xdf\x9c\x69\xbc\x22\xbc\xe2\x12\xc2\x71\xda\x0d\x93\x12\xb5\x4f\xfb\x08\x64\x4f\xa1\x16\x21\xbd\x6c\x2f\x09\x4e\x81\x51\xc7\x8d\x46\x5b\x96\xa0\x37\x56\xf6\x87\xab\xde\x70\x43\x95\x9b\x57\xd3\x9d\xa5\xc9\x28\x86\xd7\x83\x61\xe9\x7a\xb5\x9e\x87\xba\xdb\xd5\x65\xd9\xdb\xca\x99\xe2\xf3\x80\x64\xa3\xb4\x56\xc7\xeb\xd5\xda\x1b\x1c\xe7\x31\x3c\x09\x6d\x30\xc2\xdc\x1a\xd2\x93\xd1\x2e\x10\x77\xbf\xb1\xec\x95\xb1\x81\x8e\x32\xd3\x68\xf2\xd4\xc2\x72\x49\x88\xce\xe1\xcf\x3f\xeb\x47\x17\x6e\xd4\xa0\x59\x63\xa4\x7e\x4c\xdf\x32\x49\x27\x94\x52\x2d\x0f\x60\xd0\xb8\x45\x8d\x32\xc1\xd8\x1d\x2d\xae\x2e\xeb\x03\x4c\xe9\x3b\xe4\x2d\x05\x45\xa5\x90\x89\xd2\x1a\x13\x3b\x1d\x71\xfb\xb8\x7f\x5b\x5f\xc6\xf7\x78\xf8\xe9\x70\xda\x7d\xaf\xd5\x41\x70\xd4\x81\xa5\x0f\x98\xa0\x38\x04\x97\x86\x82\xc3\xf3\x72\x4b\xe7\x41\x1e\x45\xc0\x45\x79\xbc\xd2\x05\x21\x42\x50\x25\x4a\x6e\x95\xce\x84\xbc\x01\x17\x6c\xc6\x27\x27\x02\x3a\x46\xb6\xf6\xda\x62\x8f\x70\x14\x76\x47\x29\xfc\x7b\xe9\xfb\xdf\x09\xe0\xad\xc0\x94\x77\x22\x86\xce\x47\xea\x28\x91\xd3\x91\x2f\x86\xd7\x77\x25\x75\x60\xf2\xbf\x5e\xad\x4f\xdd\x21\x19\x66\xc1\xd9\xb3\x11\x07\xe7\x67\x70\x77\x0a\xcd\x3e\x51\xe4\xd4\xa3\xd3\x14\x68\xcc\xd4\x01\x5d\xb5\x21\x4b\xdc\x09\xb0\x3c\x6a\x36\xe8\x30\xc9\xa1\x24\x12\x96\x4a\x91\x5b\x66\x69\x8a\x7a\x10\xfd\xb5\xd8\x59\xfd\xe5\xea\xd2\x8b\xfe\x60\x8a\xf6\x6c\x70\x27\x0b\x77\x8c\x3c\x3f\xeb\x19\xb4\x28\x75\x9d\xdd\x62\x11\x43\xbb\xc1\x1c\x2e\x2e\x60\xcf\xa4\x48\x66\xd3\x4c\x18\x43\x6e\xba\x5e\xad\xa7\xf3\x49\x47\x30\x66\xa2\x77\x88\x74\xdb\x2c\x04\xaf\x8f\x91\xcd\x6e\xfa\x62\xc1\xca\x23\x62\x4f\x46\x55\xd6\xce\xcf\x1c\xeb\x08\xb4\x55\x5d\x02\xcb\x6e\x09\x57\x07\x2b\x41\xc8\x38\xef\x20\xd8\x00\x6c\xbc\x90\xf3\x05\x35\x4c\x55\x7e\x56\x8c\x82\x03\xd3\x9a\x15\xff\x5f\x41\xbc\x0f\xee\xf2\x0b\x33\xdf\xc1\xeb\x6e\x9d\x9a\x0c\x78\xda\xaa\x46\x27\x90\x0a\xc8\x2e\x19\x59\xc0\xb9\x53\x59\xe2\xb1\x12\x5e\xd9\xe0\xe5\xd8\x71\x27\x92\x5d\x13\x86\xee\x06\x25\xe5\xa0\x24\x0e\xf6\x54\x29\x5f\x87\x23\xe3\x93\xe0\x9f\x1b\x03\x02\x6e\xf7\x2f\x02\xc8\xdf\x56\x3d\xc6\xdb\x1c\x8d\xd5\xaa\x68\xf6\x1d\xf1\x77\xd9\x51\xaa\xd8\x70\x89\xe4\xdc\x53\x97\x53\x5a\xb3\x3b\x66\x81\x69\x6a\x75\x3d\xdf\x3f\xa2\x3f\x85\x4f\x5f\xbd\xd4\xb8\xc5\xc2\x8c\xe8\xd7\xb4\x33\x92\x5d\x16\xaa\xba\xae\x5b\x55\xe7\xfd\xb8\x62\x51\x04\x46\x95\x16\xb4\x89\x0f\x09\xa3\xa3\x13\xe3\x20\xac\x81\xac\xaa\xaf\x2e\x62\x89\xa0\x7e\xba\x53\xdc\x7c\x53\x7b\x0d\xdb\xfe\x24\xe0\x7d\x66\x1e\x68\xd0\xa7\xc9\xf0\xa8\xfb\x4d\xcd\x5a\x6c\x43\x51\xf8\x9d\xeb\xd1\x81\x26\x1e\x45\xf0\x56\x23\xb3\xe8\x22\x24\xb7\x3b\xa5\xc5\x1f\x9d\x2e\x4b\xde\x48\x69\x96\xe3\xea\x28\x13\x66\xac\x7f\xa7\xe2\x27\x82\xc6\x2d\x2c\xc7\x50\x20\xd1\x0f\x40\xd1\x83\x93\xc4\x51\xd2\xf7\xec\xed\xf5\xf9\x87\xe7\xbb\x11\x78\xa9\xeb\xd6\x3d\xb7\x07\xf0\x1b\x59\x7c\xa8\xba\xe6\x5d\xb8\x49\x9f\x02\xf5\x4a\x6e\xed\x37\x9b\x4f\x72\xb0\x1d\x86\x96\x4e\xe8\x43\x20\x54\x56\x7b\x7c\x14\x75\x8f\x30\x22\x04\x52\x55\x5d\x06\x4d\xbc\xae\x3a\x5d\xf3\xc2\x63\x56\x14\x11\xd6\x34\x1e\xd7\x97\xc2\x55\xa9\x91\x85\x92\xe8\x92\xd4\xa5\xa3\x55\x90\x54\xb1\xe7\x6a\x31\x66\x7b\x5b\xf4\x93\xbd\xf6\x5a\x49\xf9\x2b\x91\xb4\x23\xd2\x2c\xd8\xbe\x83\x23\x54\xd3\x24\xeb\x3d\x7d\x29\x3d\xed\x3f\x34\x33\x53\xa9\x36\x30\x9e\x09\x09\x4a\x83\x51\x54\x3f\xa8\x97\xd7\x37\xe4\xe5\x85\xb8\x3a\xca\xea\x06\xbd\x12\xc1\x36\xe5\x01\x29\x13\xd2\x3a\xe3\x1a\xb8\xa2\x28\x78\xad\x5a\x5e\xc5\xd6\xb7\xd4\x95\x14\xe2\x26\x87\xd2\x5f\x53\xa1\x44\xbf\xcb\x31\xce\xfd\xbc\xba\xec\x37\xe7\xba\xd3\xd3\x3f\x59\xcd\xce\x89\xd8\x0b\x24\x19\xde\x00\x95\xbb\x99\xc4\xee\x50\x68\xff\x71\x93\xf9\x83\xc4\xa9\xb4\x99\xf5\xa2\xaf\x92\x1d\xc3\x93\xbb\x07\xa7\xde\xd3\xdf\xf4\xae\xb4\x3f\x22\x74\xe2\xb2\x9f\x70\x34\x1e\x4b\x74\xbd\xab\x0d\xa7\x01\x30\x50\xdd\x11\x7b\x99\xeb\xbd\x73\x18\x9e\x73\x4b\x2c\xc2\xb7\x65\x1d\x34\xee\xbd\x20\xf3\x60\x69\xbe\x0e\xa9\x3c\x74\xc2\xf7\x47\xf3\x01\x22\xf7\x44\xd5\x3f\x0c\xb0\x24\x51\xb9\xb4\x9d\x98\x1a\x06\x12\xf8\xf1\xb2\xe8\x0d\x86\xe7\x67\x25\xa6\xbd\xad\xc3\xf0\xc1\x72\x6c\xe1\xfb\xaa\x90\xcf\x9e\xcf\xc3\xd5\xc9\xdd\xe4\xcf\xbb\x87\xab\xf6\x0d\x8f\xb3\xcc\xc9\x03\xe3\x04\x36\x64\xe5\x75\x61\x47\x85\x67\x9d\x64\xfd\x88\xe5\x2c\x42\x2e\xe4\xb0\x67\x76\x67\xba\xcc\xc1\x37\x39\xb0\x84\xc8\x94\x3f\x23\x0c\x1c\x43\xc7\x44\xb4\x6f\x74\x48\x42\x59\x6f\x1f\x21\x60\xf0\xc6\x27\xbc\x7f\x49\xd6\x31\xaf\x1e\x13\xbc\xc2\xd9\x16\x30\xaa\x3b\x86\x1d\xb0\x3a\x49\x54\x02\x1b\x76\xea\x6b\x5e\x89\xb9\xa7\x08\x37\x8a\x56\x11\xb5\x20\xa9\xb3\xf3\xb3\x96\xdb\x9b\x93\x83\x80\xce\x3b\x5a\x37\x89\x5c\x75\xa4\x84\xed\xd9\x46\xa4\xc2\x16\xb0\x55\x7a\x6c\xba\xec\x68\x90\x0a\x79\x7b\xee\x37\xe0\x76\xdb\x87\x0b\xde\x53\x3f\x4e\xef\xbb\x66\x78\xe8\x36\xe0\xf4\xcb\x6c\x78\xaa\x0e\x85\x43\xaf\x4c\x32\x7d\x83\xf6\x3e\xbc\x26\x81\x9c\xf7\xdd\x5d\x35\xa6\xbf\xe2\xea\xac\x64\xe9\x14\xc7\x52\xcc\x03\x5e\x2e\x19\x3d\x0f\x0f\xc2\xd5\x53\xd2\x9d\xa1\xc6\xdf\xd1\x9e\x26\xa7\xc9\xff\x02\x00\x00\xff\xff\xb5\xd4\xd1\x4b\x51\x1f\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xcc, 0x1e, 0xd0, 0x92, 0x80, 0xd3, 0xe2, 0x24, 0x8d, 0x2d, 0x9b, 0x16, 0x8d, 0xe, 0x47, 0x56, 0xfc, 0x18, 0x3a, 0x5, 0x23, 0x87, 0x4d, 0xd5, 0xbc, 0x9f, 0x53, 0xcb, 0x18, 0xb4, 0xa}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x6f\xdc\x36\x12\x7f\xdf\xbf\x62\xe0\x03\x02\x3b\xb7\x2b\x39\x69\x6b\xf4\x16\xdd\x16\x6e\x1c\xa7\x3e\x24\x39\xc3\x71\x7a\x0f\x45\x10\x53\xd2\x68\x97\x17\x8a\x54\x49\xca\xeb\x6d\x90\xff\xfd\x30\x23\xea\x6b\x25\xbb\x4e\x71\x97\x07\x77\x25\x91\xf3\xf1\xe3\x7c\xb3\xf1\xd3\xa7\xb3\xd9\xf5\x46\x3a\x48\x8d\xf6\x56\xa4\x1e\x64\x51\x2a\x2c\x50\x7b\x07\x7e\x83\x50\xa0\x17\x99\xf0\x02\x9c\x17\x3a\x13\x36\x83\xd2\x9a\xd2\x38\xcc\x66\x52\xc3\xf9\xeb\x8b\xcb\xc5\xf1\xc9\x37\x27\xd1\x6c\x76\x85\xf9\x12\x36\xde\x97\x6e\x19\xc7\x6b\xe9\x37\x55\x12\xa5\xa6\x88\x8d\xce\x95\xd9\xc6\xfc\x27\x51\x26\x89\x0b\xe1\x3c\xda\x38\x57\xb2\x74\xf1\xf3\xe3\xe7\xcf\x8e\xff\xf1\xec\x64\xa1\x73\xbf\x68\x98\x45\x45\x36\x9b\xbd\xf3\xb6\x4a\xbd\x03\xa1\x33\xb0\xe8\x4c\x65\x53\x74\x90\x0a\xdd\x89\x08\x46\x23\x18\x0b\x85\xb1\x38\x6b\x25\xf5\xbb\x12\xdd\x1c\x52\xa1\x14\x66\x70\x2b\x71\xeb\x22\x78\x29\xd2\x0d\xff\xe6\xcf\x60\xb1\xb4\xe8\x48\xcb\x99\x80\x4c\xe6\x39\x5a\xa2\xf7\x49\xea\x0c\x4c\xde\x6a\x3d\x07\x57\xa5\x1b\x10\x0e\x04\xa4\x16\x85\x37\x16\x12\x69\xd6\x56\x94\x9b\xdd\xcc\x58\x10\xf0\xcf\xcb\x97\xaf\x40\x16\x62\x8d\x90\x4b\x85\xd1\xec\x69\x3c\x9b\xc9\xa2\x34\xd6\xc3\x79\xa5\xd7\x32\x51\x78\x6d\x3e\xa1\x86\xdc\x9a\x02\x8e\xef\x10\xbf\x7f\xfe\xfd\x77\x27\x49\xfe\xfc\x18\x9f\x0b\x71\x32\x9b\x95\x55\xd2\xe1\xff\x26\xb0\xfe\x95\xe4\x86\xcf\xb3\x19\x00\x40\x1c\xc7\x70\x0a\x57\xe8\x8c\xba\x45\x4b\x47\x70\x2b\x33\x74\x20\xd2\x14\x9d\x03\x6f\x40\x80\x43\xdf\x17\x3d\x28\xde\x6c\xef\x91\x71\x0c\x2c\xe1\xd6\xc0\x0a\x87\x18\xad\x23\x10\x1a\xde\x9e\x5f\x1f\xed\x61\xec\xc9\x3c\xa4\xf6\x68\x73\x91\x62\x4b\xc7\x9b\x46\x8c\x9e\x14\x64\x31\xcc\x17\xfc\x46\x78\x90\x1e\x5c\x55\x12\x14\x7b\x82\x90\xc6\x2d\xf3\x96\x76\xa7\xe0\x67\x5e\xd5\xac\xcc\x2b\x0d\x6b\xf4\x8c\xc8\xe1\xd1\x12\x7e\xbb\xde\x95\xf8\x61\xb4\xc4\xd6\xbb\x69\xd9\xe1\x47\x16\x63\x09\xb4\xf2\x68\x09\xa7\x7a\x57\x9b\xd3\x4f\xbc\xeb\xcb\x14\xaa\x2f\x8c\x52\x98\x7a\x69\x34\x48\x3a\xef\xb5\x35\x55\x49\x88\xb2\xd5\x04\xe2\x96\xa0\xc8\xf0\x0e\x92\x1d\x5c\x9c\x7d\x95\x52\x3d\xfa\x63\xf5\x12\x63\xad\xd9\x92\xe8\xcd\xf2\x43\x99\x2d\xe1\xfd\x85\xf6\x27\xdf\x1e\x2d\xe1\xc9\xe7\xe6\xfd\x97\x29\x68\x2e\xce\x6a\x60\xea\xf5\x1f\xf6\x95\x3c\x93\xae\x54\x62\x57\xeb\x95\x08\x27\xd3\xe0\x0a\x7c\x48\x3a\x55\x15\x19\x13\x1d\x9e\x16\x05\xce\x21\x43\x97\x5a\x59\xb2\xac\x42\x67\xdd\x99\x6f\xaa\x22\xd1\x42\x2a\xc8\xc9\xf6\x35\x98\xe4\x3f\x98\xfa\x08\xde\x18\xe7\xc3\x83\x03\xb7\x31\x95\xca\xf6\x2d\x88\x18\x8e\xf1\x0a\xb6\xd8\x08\x18\xcc\xbd\xe1\x77\x1d\x24\xa2\x53\x20\xe9\x1a\x76\xfd\x45\x7b\x1b\xa4\x83\x5c\xa2\xca\x60\x2b\x95\x82\x04\x21\xab\x49\x63\x06\x52\x83\x92\x2e\x44\x14\xbf\x41\x8b\xb9\xb1\x18\xc4\x1d\x90\x49\xf8\xad\xf5\xa4\x62\x6a\x74\x2a\x1d\x46\x93\x3c\x49\x05\x85\x9e\x85\x5c\xc2\x3b\x6f\xa5\x5e\x0f\x55\x38\x85\xad\x95\xde\xa3\x1e\x80\xfa\xbf\xd2\x47\x40\x86\x5e\xc8\x26\xce\x0d\xe9\xce\x07\xa4\x9c\x61\xbf\x4e\x90\xa3\x25\xdc\xa2\x4d\x8c\x6b\x3d\x1f\x4a\x61\x05\x87\x35\x90\xda\x79\x14\x1c\x06\x05\x38\xa9\xd7\x0a\x41\x49\x8d\x47\x0f\x43\xd0\x53\xef\x3e\x24\x5c\x21\x94\xea\x19\x51\x1b\x84\xc5\x04\x28\x8f\xc1\x24\x58\x5a\x82\x20\x60\x8b\xc9\x22\xb7\x12\x75\xa6\x76\x1c\x89\xe1\x50\x46\xc8\xe1\x79\x0e\x97\x6f\x5f\x1d\x0d\x88\xb0\xe5\x07\x3c\xc6\x16\x32\x27\x85\x3f\x41\x69\x91\x83\xd9\x1c\xd0\xa7\x0f\x6b\xdf\x2a\xd5\x8b\x35\x9f\xcf\xa5\xc2\x2f\x1d\x08\x52\x4b\x7f\xd8\x3e\xd1\xbf\xbe\xd9\xcc\x07\x5f\x26\xd0\x1c\x2e\x78\x80\x61\xb3\xe4\xa8\x17\x67\xe8\x9f\x43\x95\x47\xec\x4e\x2b\xe6\x3c\xfe\xd8\x37\xd1\x55\x5f\x86\xf1\xd2\xee\x14\x57\x9d\x2c\xed\xb2\x2f\xfb\x11\x88\x24\x0b\x61\x15\x35\x5a\x99\xf6\x02\x24\x9f\x45\x97\x90\x41\xd4\xc7\xe7\xbc\xb1\x98\x01\x19\x86\x05\x93\xe7\x90\x6e\x84\xd4\xe3\x84\x46\xa4\x5d\x73\x96\x95\xc3\x8c\x12\x91\x45\xce\xe8\x54\x31\x70\x6e\x76\x73\xa0\x54\x65\x6a\xe7\x37\xe4\xfd\x50\x60\x26\xc5\xbd\x21\xa9\x93\x8f\x65\x1f\x87\xec\xca\x4a\x8a\xb9\xc1\xd4\xf7\xf4\xfd\xe5\xfa\xfa\xb2\xd3\x99\xf5\xa9\x83\x6d\x93\xb3\xa9\x2c\x00\xc1\x11\x86\xd6\xc2\xa1\xb1\xfc\xe3\xdd\x11\xbc\xbf\x7a\x1d\x42\xc2\x84\x58\x0d\xe1\xe5\x94\x58\x64\x89\x95\x55\x63\xff\x63\xd3\xeb\x7d\x99\x34\x8d\xca\xd2\x61\x56\xb6\x7f\x8c\x0f\x6b\xbd\x47\xc5\xa2\xaf\xac\x6e\x89\xdd\x6f\x0d\x17\x97\xe7\xef\x58\xfc\x7a\x07\x41\xd4\xd9\x53\xa8\xa5\xfa\x09\xa6\xdd\x18\x6c\x82\xea\x31\xdd\x2b\xba\xc8\x71\x89\xe6\xd8\x38\xe8\x6d\xb0\x00\x10\x16\x3b\xbb\xc8\x28\x83\xfb\x0d\x4a\xcb\xa5\x17\xa5\x29\x99\xa1\xf6\x32\x97\x68\xe1\xf0\xc5\xc5\xd9\x51\x4b\xc4\x0a\xb6\x17\xbf\x11\x1c\x71\xa5\xc5\xd4\xc3\xfb\xab\x8b\x08\x4e\x21\x55\x92\xf6\x8a\xb2\x54\x32\xad\xe3\x18\x99\x62\xe5\xb0\x4e\x7b\x2f\x2e\xce\xfa\x25\x53\x4e\x05\x26\x99\xa0\x32\x82\x93\x50\xd0\xe2\x56\x0a\x52\x89\xc5\x5d\x0b\x8f\x5b\xb1\xbb\xd7\x32\x1b\xf4\x5a\x13\x18\x44\xb6\x17\x17\x67\x64\x65\x44\x7a\x42\x31\x82\x95\xe5\x62\x4e\x75\xc1\xda\xdb\x3d\xa0\x34\x28\xe8\x33\x93\xba\x48\x96\xb9\x8b\xa4\x89\x29\x27\x62\xe9\x5d\x1c\x38\x2c\x44\x96\x59\x32\x6a\xbd\x8e\x1f\x0c\x93\x29\x15\x35\x53\xc9\xe1\x52\xf8\x0d\x3b\x87\x06\xc3\x11\x47\x28\x28\xe9\x5d\x28\x2a\xf3\xda\x5a\xda\xe2\xaa\x05\xab\x3e\x0d\x63\x77\x8f\x4a\x18\xd2\x81\xd1\x6a\x07\x1a\x31\xa3\x78\x9f\x77\xc4\xb9\xc8\x75\x5c\xce\x3e\x86\xe8\x23\xc0\x21\xb2\x0b\xb7\x73\x1e\x0b\xf7\x30\x2c\xa4\x69\x83\xcb\x4f\x7b\x5e\xdb\x83\x6c\x3e\x5c\x38\xe9\xc4\xa9\xcc\x60\x45\x38\x8f\x3f\x31\x9e\x2b\xa6\x31\xe5\xe1\x1d\x54\x95\xae\xcb\xd4\xc6\x3b\x09\x23\x06\x5b\x0b\x2f\x6f\x91\x02\x54\x67\x48\x7f\xd5\x86\x36\x66\xbb\xf0\x26\x0e\x96\xb3\xa0\xd7\x0b\xa3\x17\x5b\x4c\xe2\xbf\xd5\x7c\x16\x95\x55\xee\x5e\xdc\xfe\x2c\x18\xc9\xbc\x85\x16\x56\x3d\x00\x86\xab\xa0\x0b\x5b\x07\x24\xc2\x32\x8e\x0f\x22\x3a\x41\xe1\x0f\x1b\x3c\x8f\x9a\x17\x07\xf1\x41\xfb\x9b\x68\x1d\x0d\x48\xf5\xa0\x7c\x14\xd5\x7b\xc2\xe3\x53\xfe\xcf\x53\x80\x2b\xb3\x13\xca\xef\x80\xdb\x9e\xe6\xe5\x19\xe6\x52\x63\xe3\xde\x45\x69\x9c\xa0\x44\x62\xc3\xda\xb6\x49\xe7\x64\xb3\x96\xb7\xe8\xa0\x10\xf6\x13\xfa\x52\x09\x4a\x86\x02\x2a\x4d\x91\x20\xdb\xeb\xe8\x9e\x02\x79\x5a\x68\xd6\xa8\x0b\x0c\x24\x25\x86\xce\xad\x15\xeb\x4d\x9f\x1c\x85\xba\xdf\x2b\xb4\xbb\xda\x16\x6e\xae\x9a\x4d\x37\x4d\xb0\xe2\xa6\xf7\xed\xf9\xb5\x83\x86\x00\x45\x3f\x0a\xc5\x78\x57\x62\xea\xeb\x74\x5d\x8a\x5d\xc7\x90\x3a\x94\x3a\xf1\xfb\x0d\x3a\x04\x57\x62\x2a\xf3\x10\x5d\x87\xe2\x8c\x62\x63\x2b\xc0\x7e\x58\x3c\xb5\x56\xec\x6a\x58\xa8\xcf\xfe\x54\x43\x28\x75\x26\x6f\x65\x56\x09\xd5\xb1\x6f\xb7\xd5\x89\x9a\x0f\xec\xa8\x8e\x5e\x95\xbf\xd0\xb9\x71\x4b\xf8\x2d\x1c\xce\x87\x61\x82\x64\x87\xfd\x38\xb5\x6e\xdf\x57\xe3\x18\x7e\x15\x4a\x66\xc2\x87\xc2\xc0\x55\x05\x57\xdc\x4a\xd1\x76\x28\x2a\xe5\x65\xa9\x24\x35\x9c\xa1\xca\xd5\xc6\x53\x85\xb3\xb6\x28\x7c\x93\x8d\x9e\x45\xc7\x03\xb2\xb7\xc2\x82\x37\x5e\xa8\x17\x95\x87\x15\x1c\xef\x7d\x26\xa7\x6d\x4c\x45\xea\x56\xce\x09\x9f\xe8\x11\x69\x7f\xfe\xbd\xd9\x1b\xa5\x95\xdf\x33\xfd\xfe\x93\x70\x0e\xad\x3f\x6c\xf7\xfd\xb0\x22\x39\xe7\x50\xa0\x73\x62\x8d\x4b\x38\x78\x57\x2b\xdb\xf2\x7f\xbc\xb6\x07\x47\xfb\x30\x9e\x3a\x27\xd7\xba\x76\x88\x40\x6f\x22\x2a\x36\x9c\x56\xe3\x45\x7b\x21\xf0\xaa\xf6\xdb\x3e\x3d\x6e\x0a\xa6\xda\xee\xd6\xda\xb8\xf9\x6e\xce\xfa\x81\xaa\x68\x82\x39\x0c\x4b\xa3\xba\x92\x67\x67\xa4\x5a\x27\xf4\x77\x6e\xd0\x8d\x35\x47\x48\x86\xc2\x75\x12\x7b\x3a\x0f\x6f\xa6\xfd\x61\xd4\x58\xbf\x0a\x45\xf8\x70\x40\x75\x85\x29\xca\xdb\xb6\x4a\x40\x48\x50\x63\x2e\x53\x29\xec\xae\xe9\xce\x02\xef\x61\xc9\x21\x18\x8d\xa6\xe6\x48\x2d\x92\x55\xef\xca\xb6\x6f\xb7\x0d\xe1\xad\xf4\x9b\xf6\x29\x5a\xa3\xbf\xde\x95\x78\x78\xb4\x77\x00\xa9\x29\x0a\xd4\x59\x5d\x4d\x2d\xe0\xbd\xeb\xd9\x05\x4f\xe1\x28\x47\x6b\xdc\xd6\x5d\x5a\x8d\xc0\xb9\x32\xdb\x5a\x0b\x3b\xd4\x42\x3a\xa8\x08\x37\xb8\x69\x0f\x6c\xd7\x28\x7a\x59\x25\x4a\xa6\x54\x7b\x1c\x1e\xdd\x0c\xdb\x65\x8a\x52\x64\x83\x75\x21\x47\xe7\x90\x8b\x4a\xf9\x09\x3e\xd1\x38\x83\x72\xaf\x2e\x94\x32\x5b\xda\x6f\x79\x34\x56\x95\xc1\xd9\x11\x52\x51\x8a\x44\x2a\x59\x7b\x21\x57\x20\x95\xaf\x2c\xf2\x32\x47\xca\x71\x8b\xde\x74\x4a\xdd\xf2\x51\xe1\xd0\xc8\xb0\x84\x17\xed\xa2\x1f\x9e\x9c\xea\xdd\x55\x28\x95\x3e\x0f\x4e\x38\x6a\x14\xff\xf2\xe3\xd0\x1e\xde\xb4\x0e\xd8\x76\x50\xa9\x50\x69\xa5\x1a\x91\x45\x61\x2a\xcd\xf3\x45\x27\x14\xc2\xad\x50\x15\x52\x20\xd5\x2e\x47\x6b\x43\xcf\x15\x6c\x6d\x1a\x98\xb7\xc6\x23\x2c\xe0\xc2\xf7\xba\xf6\x04\xfd\x16\x51\x53\x9c\x62\xc0\x9f\x45\xc7\x83\x59\x08\xbc\xbc\xa3\x2d\xb5\x11\xf5\x18\x4b\x07\x77\xbc\xa1\x0b\x1c\xf4\xee\x38\xfa\xee\x84\x96\xea\xbe\xa5\x86\x2d\xdb\x86\x27\x2f\x7a\x0a\x77\xf7\xd7\x2c\xec\x1c\x42\xa9\x1d\x94\x68\x53\xd4\x9e\x0a\xf4\x35\xf6\x7a\xd4\x7a\x54\xe0\xd1\x16\xec\x98\x89\x70\xd2\x41\x69\xa4\xf6\x83\x7a\x85\x16\x39\xa3\x64\x46\x27\x5d\x27\x35\x57\x08\xeb\xdb\x61\xaf\x83\xed\x86\x6a\xcf\x54\x64\xd4\x93\x50\x97\x4b\xd6\x72\xf3\xfe\x5c\xde\x9d\x7c\x7b\x53\x67\x06\xa1\x2c\x8a\x6c\xd7\x4e\x52\xf7\xe6\x18\x38\x60\xcf\xf6\x93\x0a\x47\xd8\xa6\x82\x1e\xa4\x77\x60\x4a\xb4\x75\xf6\x1c\xda\x38\x65\x61\xed\xa5\x45\xb5\xa3\x40\x83\xb6\x90\x5a\x3a\x1f\xba\xf3\x35\xda\xde\x4e\xc6\xbb\x29\x10\xaa\x92\x0e\xfc\xfb\x86\xa9\xc9\xa1\xb4\x98\x4a\x27\x8d\x8e\xc6\x45\x7f\xe5\x97\x50\xab\x34\xb4\xba\x7f\x35\x95\xfe\x60\xda\x51\x5f\x47\xd4\xed\x7c\xed\x2d\xa4\x06\xb1\x10\x3b\xf2\xe3\xde\xd9\xce\x47\x58\x58\x54\xb5\xb8\x1b\x59\xb6\xe6\x45\x1f\x6e\xb6\x42\x29\xf4\x37\xcd\xf0\x8f\x82\xe5\x1c\xb8\xc9\xdc\xf9\x0d\xd1\x45\xe5\x42\x2e\xe6\x29\xd4\x56\xa3\x85\x42\xae\x37\x1e\xb6\x42\xd7\x11\x99\x0b\x91\xb1\x17\x3e\x38\xfa\xe2\x9a\x80\x5c\xa2\xa4\x46\xf1\xeb\x1d\x75\xde\xc7\x6f\x3e\xc5\x6b\xbf\xb6\x28\x2d\x4e\x64\x74\x4a\x16\x3f\x72\x49\x00\x4f\x9e\xf0\x53\x9d\x97\x61\x09\x07\x94\xa5\x6b\x37\xe9\x7c\x53\x6a\x7a\x25\x33\xb0\x42\xaf\x11\x64\x84\xf0\xdb\xf1\xfc\xd9\x87\x83\x07\x32\x3f\xe7\xb8\x36\xfe\xae\xa0\x55\x7b\x32\x23\xd7\xc9\xf8\xaf\x4c\xa1\x46\x59\xf3\x55\xc8\x3e\x75\xcb\xc8\xf5\x54\xab\x08\x07\x34\xae\x7c\x58\x30\x3a\xea\x61\xad\xd7\x86\x6d\x9e\xd5\x74\x24\x38\x8a\xe3\x2d\x6a\x5f\x71\x34\xe8\xd3\xea\xe6\x58\x6e\x2b\x7d\xba\x49\x0c\x55\xdd\x8d\xea\xf3\x96\xee\x86\xfd\xba\x99\xac\x43\x52\x05\xb2\xdc\x85\x0e\x84\x6b\x0b\x57\x7a\xd2\x26\xcc\xca\x47\xc5\xc6\x64\xee\x5a\x42\xf7\xd4\x3b\xfa\x50\x79\xc4\x25\x7f\x8c\x43\xd2\x3f\xbf\x6e\x48\x0c\x51\x84\xd3\x70\x29\x60\xba\x40\x07\x6f\x30\x93\x62\xde\x8c\xb0\x38\x7d\xf3\x4c\xdc\x5a\x74\xa5\x91\x19\xa1\xc9\x73\x34\x4a\xe4\xd1\x7e\xf5\xc1\xbb\x27\x66\x54\x39\x4f\x2f\xee\x1d\x94\xc6\x71\x4d\x73\xc1\x35\x44\x6a\x0a\x74\xa1\x1b\x20\x70\xb8\x74\xa4\x2f\xb1\xab\x12\x5e\x21\x5c\xb0\x92\x04\x33\xd8\xa0\xc5\xae\xe3\xc4\x5b\x54\x14\xc3\xa2\xc2\xfc\x21\x95\x12\x91\xb1\xeb\x18\xf5\xe2\xfd\x3b\xee\x46\xe3\x7f\x63\x12\xff\x72\x7d\x7d\x19\xff\x2c\x9c\x4c\xdd\x47\x93\x7f\xe4\xc7\x37\x17\x6f\x5e\x7e\xe4\x8b\xc4\x91\xf0\xad\xba\xf7\xf8\xfa\xa4\x72\xf3\xf1\xb6\xa1\xdb\xb2\xe5\xd3\xd6\x15\xfd\xd9\xff\xd0\x6e\x5e\xb5\xbf\xee\x73\x06\x38\x05\x25\x53\xd4\x8e\xef\xe5\x8c\xe5\x23\xf2\xa6\x85\xc4\x95\xd9\x1d\xa3\x10\x56\xb9\x66\x58\xd6\xec\xbf\x6e\x6e\x6b\x06\x33\xd5\x30\x2a\x69\x46\x4a\x54\x8e\x72\xc1\x49\x4e\x13\x28\x65\x61\x6a\xd9\x33\x80\xd7\x41\x92\xb1\x09\x90\x18\x17\xed\x5c\xea\x1e\x28\x3f\xf6\x46\x57\x0f\x8e\x2e\x87\xd4\x60\xd5\xdb\xf7\x00\x4e\x8d\xb9\xe3\x5d\x69\xb8\xec\x7a\x7f\xf5\xba\x1e\x38\x51\x30\xf0\x58\x00\xdf\x7f\x01\xde\x79\xb4\x94\xa7\x9c\xf4\x18\x4d\xc1\xd5\x47\x2a\xd9\xf5\xa7\x81\x84\xce\x27\x84\xa8\x1d\xfc\xfd\xac\x4c\x4a\x3c\x4c\x33\x48\x6c\x2b\x44\x4e\x3b\x56\xae\x25\xb1\xea\x4a\x5b\x86\x79\xe4\x5a\x2f\x83\x4c\x24\xf2\xd7\x0c\x81\x3f\xc2\x23\xc6\xc0\xab\x07\xa6\xb7\x63\xdc\xea\x46\x9a\x3c\xb3\xae\xd8\xc3\x70\x8d\x12\xe6\xc6\x6c\xb9\x18\x61\x44\xc9\x5a\xd2\xf6\x12\xf4\x6b\x61\xf4\x86\xbb\x1c\x9e\x10\xde\xa2\x65\x19\x08\x4f\xbe\xb4\x92\xa9\x6b\x7a\x8d\x49\x2e\x9d\x00\x09\x2a\xa3\xd7\x44\x6e\x04\xe9\xdb\xf3\xeb\xee\x8e\xb6\xbb\x91\xec\x45\xa5\xb7\x14\xc3\xa7\xd2\xcb\x96\x8a\xce\x70\x8f\x54\xd7\x28\x81\xdd\x8b\xa1\x24\xf0\x88\x3b\x43\x38\xeb\xe5\xbf\x29\x66\x53\x48\xb0\xf2\xfc\xbf\x71\x34\xfc\xc6\x75\xd8\x9f\xdc\xd0\xc1\xbb\xdf\x2b\x61\x71\xe1\xe4\x1f\xe4\xef\x3c\x96\x1e\xe4\x82\x3d\x06\x63\x97\xe6\xfd\x17\x05\xf7\xf8\x1c\xfa\x07\xe4\x7f\x16\x5a\xa3\x1d\x90\x6f\x3b\xb4\x8e\xea\x9c\x92\x68\xdd\xff\xd5\xaa\x6e\x04\xa9\x0a\xb4\x0d\x34\x0a\x0b\xcf\x9e\x1f\x1f\xdf\x9d\x7c\x73\x3c\xe2\x9f\x30\x83\x69\xfe\x6c\xfb\x83\xeb\xb6\xc9\x2b\xb6\x09\x1d\xe6\x13\x74\xff\xaf\x37\x6b\x3d\x11\x60\xd5\x17\x68\xbc\xb4\x27\x19\xac\xfa\x72\x8e\x9c\xf7\xcb\xec\xbf\x01\x00\x00\xff\xff\xc6\xa4\xc6\x8d\xeb\x23\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0x6f, 0x76, 0x17, 0xaf, 0xe1, 0xc1, 0xf2, 0xc9, 0x8a, 0x1e, 0x6a, 0x60, 0x38, 0xb6, 0xc1, 0x21, 0xac, 0x65, 0xa7, 0x63, 0x10, 0x87, 0x6e, 0xcd, 0x18, 0x85, 0xef, 0xc5, 0x30, 0xfa, 0x52}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
