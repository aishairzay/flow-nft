// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (8.337kB)
// ../../../contracts/MetadataViews.cdc (9.391kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x98\xf5\x43\x4f\xc6\x36\x56\xbb\xdb\xf6\x76\x8d\xb8\x69\xd1\xd4\xb8\x00\xd7\xa0\x48\xbd\xb7\x0f\x45\xd1\xa5\xc5\x71\x4c\x44\x22\x7d\x24\x65\xd7\x9b\xf5\x77\x3f\x0c\xf5\x8f\x92\xa8\x24\xbd\xbc\xac\x51\x34\xb6\x38\x33\x9c\xf9\xcd\x70\xfe\x50\x71\x0c\xcb\x8d\x30\x20\x0c\x30\x09\xf8\x8d\x65\xdb\x14\x41\xd0\xff\x19\x4a\xcb\xac\x50\x12\xd4\x1a\x18\x2c\x52\xb5\x87\x4b\x25\x4f\x16\xb9\xbc\x16\xab\x14\x61\xa9\x6e\x50\x8e\xe2\x18\x2e\x2c\xf1\x4b\x65\x61\xcb\xb4\x25\x72\xbb\x41\x50\xeb\xb5\x48\x04\x4b\xc1\x58\x26\x39\xd3\x1c\x56\xb9\x05\x61\x81\x19\x93\x67\xc8\xc1\x2a\x58\x21\xf1\xef\x50\x1f\xc0\x88\x4c\xa4\x4c\xd3\xd3\x8d\xda\x43\xc6\xe4\x01\x2e\x17\x4b\x03\x7b\x95\xa7\xbc\x51\xc9\xc9\x4e\x94\x46\x58\xe7\x32\x21\xfd\x58\x2a\xec\x61\x3a\x1a\x89\x6c\xab\xb4\x25\x1d\x2b\x15\x9d\x86\xb0\xd6\x2a\x83\xf1\x34\xee\x2e\x4c\x13\x9e\x8c\x2b\xae\x0f\x68\x19\x67\x96\xfd\x47\xe0\xde\xd4\x2c\xad\xa7\x05\xfd\x68\x9b\xaf\x20\x51\xd2\x6a\x96\x58\x78\x5f\x20\x76\xb9\x58\xce\xfa\x1b\xdf\x8e\x46\x00\x00\xc4\xb0\x73\x96\x59\x96\x7e\xca\xb7\xdb\xf4\x30\x83\xdf\x2e\xa4\x7d\xf5\xa2\x21\xc0\x1d\xd9\xf6\xae\x94\x7b\x21\x85\x15\x2c\x15\x7f\x22\x8f\x26\x1d\x9a\xdf\x85\xdd\x70\xcd\xf6\x91\xe0\x95\x98\xa7\x4e\xe1\x19\xbc\xe5\x5c\xa3\x31\x67\x5d\x96\x73\xdc\x2a\x23\x6c\x8b\xc3\x2a\x9f\xbe\x66\x48\x91\xb4\x48\x53\x74\xd0\x7e\xb2\x4a\xb3\x6b\xfc\xc8\xec\x66\x06\xde\x8f\x01\xf2\x8f\xf9\x2a\x15\x49\x41\xdd\x7c\x6f\x11\x7f\x10\xd2\xa2\x1e\x94\x5b\xd3\x6a\x34\x2a\xd7\x09\x42\x10\xda\xe9\xc5\xe5\x62\xf9\xb4\xed\xb4\xe9\x15\x1a\x95\xee\x50\xc3\xad\x93\xe2\xef\xda\x18\x3e\xea\xad\x49\x96\x21\x29\xa1\x85\xbc\xee\x2d\x72\x34\x89\x16\x5b\x32\x6e\x90\xc6\x6e\xf2\x6c\x25\x99\x48\x7b\x14\x2c\x49\xd0\x98\xc8\x60\xba\x9e\x38\x52\xad\x0e\x2c\xb5\x02\xcd\x0c\x3e\x77\x94\x77\x2b\x87\x2f\x8d\x7e\x42\x0a\x1b\xd5\xbf\xdc\x93\xc6\x7d\xad\xe7\xbe\x05\xed\x95\x80\xfa\x6d\x82\x9e\xee\xed\xe5\x07\xe8\x5b\x91\x4e\x3c\xd8\xe9\x43\x46\x4f\x05\x87\x39\x08\xde\x5f\x20\x95\x61\xee\x34\xef\x2f\x7a\x5a\xc3\xdc\xb7\xa1\x4f\x5a\xeb\x0f\xf3\xc6\x96\x3e\x59\x6d\x07\xcc\x1b\x9b\x6a\xb2\xa3\xfb\xd6\xf2\xeb\x3a\x97\x70\x8d\xd6\xd9\x1a\x4d\x66\xf0\x79\x79\xd8\xe2\x97\x8e\x89\x1a\x6d\xae\x25\x7c\x6e\x3d\xa4\x0f\x11\x9f\xb6\xf1\x3a\x17\x66\x9b\xb2\xc3\xeb\x68\xf2\xf4\x21\xe4\x57\x95\x92\x0f\x65\xb8\x5c\x2c\x9b\x73\xf8\x9d\x9b\xbd\xff\x66\x51\x4b\x96\xfe\x76\xf5\xef\xd7\x65\xba\xa9\x3e\x5f\x3c\x90\x7a\x00\xe9\xe2\xc0\x91\x90\xe8\x2b\xec\x04\xee\x67\x4e\xfc\x64\x06\x6f\xe5\xe1\x93\xd5\x79\x62\xcf\xba\x61\xb1\x17\x36\xd9\x38\xe2\xce\x0a\x7d\x12\x66\xf0\x6e\xf4\x66\x3d\x1e\xcf\x13\x41\xa6\x28\xc8\x01\xf5\xb9\xa9\xe3\xb1\x8f\x55\xf5\x69\x1d\xa3\x6e\x88\x0e\xb3\x79\x87\xab\xad\xd9\xbf\x96\xcb\x8f\x0b\x91\xe2\xb0\x6a\xf4\xc9\x75\x3a\xeb\x44\xf9\x20\xfd\x24\xb8\xd2\x7f\x3a\x04\xb0\x1f\x6f\xdf\x01\x71\xcd\x36\x6c\x49\xfb\xfc\x3d\x52\xcd\x76\xa4\x7e\x87\xa2\x1e\x63\x34\xde\x58\xbb\x35\xb3\x38\x2e\xdb\x9d\x13\xb9\xb6\x53\x25\xd7\xa9\xda\x4f\x95\xbe\x8e\xc7\xd3\x44\xc9\x84\xd9\xa8\x4c\x61\x53\xab\x8a\xdc\x18\x4d\x26\x0f\x57\x75\xe0\x40\x86\x75\xa6\xda\x90\x21\x17\x0c\xe6\x1d\xc5\x3f\xd0\xd3\x61\x74\xd7\x22\xc5\x47\x44\x57\x0d\x05\x33\x06\xad\x99\xee\x71\x65\x84\xc5\x13\x12\x6b\xa6\x89\xca\xe2\x97\xeb\x57\x3f\xfd\xfa\x22\x79\x96\xfc\x93\xfd\x92\x70\xfe\xea\xc5\xcf\xab\xe7\xc9\x2f\x3f\x3d\xeb\x2c\xb0\x97\x2f\x93\xd5\xf3\xe4\xd7\x9f\x5f\x7d\xa5\x46\xf1\xeb\xef\x4a\xf3\x8c\xe9\x9b\xa9\xd9\x5d\x8f\x87\xa3\x76\xf8\xec\x38\x34\x08\xd6\x19\x8c\x45\xc6\xae\x31\x36\xbb\xeb\x1f\xbf\x65\x69\x58\x5a\x38\xfe\x83\xa1\x10\x72\xcc\x7d\x39\x62\xbc\xdc\x60\xd5\xeb\x79\xfd\xce\xf8\x81\x29\x63\xec\x7a\xec\xa4\xe6\xa3\x76\x39\x37\xc8\x81\xb5\xda\x6e\x6a\x7d\x31\xdd\xc2\x41\xe5\xc0\x71\x87\xa9\x72\xdf\x35\x48\xfc\x66\xcb\x06\x7c\xb1\x9c\xde\xb1\x2b\x36\x61\xde\x8d\x8a\xef\x38\x01\xe3\x3b\xfc\x62\xfe\x9b\x33\x8d\x17\xe4\x91\x59\xe1\xa4\x61\xda\x15\x93\x12\xb5\x4f\xfb\x00\xdf\x1d\x43\x25\x56\x7a\xa9\xaf\x20\x38\x06\x5a\x45\xd7\x5a\xae\x59\x82\x5e\x5b\xde\x6d\x4e\x3b\xcd\x21\x95\x31\x5e\x76\xc7\x96\x3a\xcb\x19\xbc\xe9\x35\x9b\x97\x8b\xe5\x24\xd4\x1d\x5c\x9c\x17\xbd\x41\xd1\x93\x7d\xe9\x91\xac\x94\xd6\x6a\x7f\xb9\x58\x7a\x8d\xf7\x64\x06\x4f\x42\x1b\x0c\x30\x37\x86\x74\x64\x34\x0b\xc4\xdd\xad\xb2\x5b\x65\x6c\xa0\xbc\x46\x1a\x4d\x9e\x5a\x98\xcf\x09\xd1\x09\xfc\xf5\x57\xf5\xe8\xcc\xb5\x6a\xd4\xab\x0d\x64\xa8\xf1\x3b\x26\x69\xc2\x2b\xd4\xf2\x00\x06\x8d\x6b\xd4\x28\x13\x9c\xb9\xd1\xec\xe2\xbc\x1a\x00\x0b\xdf\x21\x6f\x28\x28\xee\x85\x4c\x94\xd6\x98\xd8\xf1\x80\xdb\x87\xfd\xdb\xf8\x72\x76\x87\x87\x9f\xf6\xa7\x85\x8f\x5a\xed\x04\x47\x1d\x58\xba\xc2\x04\xc5\x2e\xb8\xd4\x17\x1c\x9e\x37\x1a\x3a\x0f\xf2\x38\x06\x2e\x8a\xf1\x54\x1f\x08\x11\x82\x2a\x51\x72\xad\x74\x26\xe4\x35\xb8\x60\x33\x3e\x39\x11\xd0\x18\xde\xd8\x6b\x0f\x5b\x84\xbd\xb0\x1b\x4a\x12\x7f\x14\xbe\xff\x83\x00\x5e\x0b\x4c\x79\x2b\x62\x68\xbe\x54\x7b\x89\x9c\x46\xe6\x19\xbc\xb9\x2d\xa8\x03\x93\xd3\xe5\x62\x79\x6c\x0f\x19\x10\x05\x7b\xf7\x5a\x1c\x9c\x9e\xc0\xed\x31\xd4\x08\xc6\xb1\x53\x8f\xa6\x51\xd0\x98\xa9\x1d\xba\x7c\x46\x96\xb8\x09\xba\x18\xd5\x6b\x74\x98\xe4\x50\x10\x09\x4b\xc9\xce\x2d\xb3\x34\x45\xdd\x8b\xfe\x4a\x6c\x54\x7d\xb9\x38\xf7\xa2\x3f\x78\x44\x3b\x36\xb8\xc9\xcc\x8d\xe1\xa7\x27\x1d\x83\xa6\x85\xae\xd1\x0d\x1e\x66\xd0\x6c\x30\x81\xb3\x33\xd8\x32\x29\x92\x68\x9c\x09\x63\xc8\x4d\x97\x8b\xe5\x78\x32\x6a\x09\xc6\x4c\x74\x86\x70\xb7\xcd\x54\xf0\x6a\x0c\xaf\x77\xd3\x67\x53\x56\x8c\xd8\x1d\x19\x65\x5a\x3b\x3d\x71\xac\x03\xd0\x96\x79\x09\x2c\xbb\x21\x5c\x1d\xac\x04\x21\xe3\xbc\x85\x60\x0d\xb0\xf1\x42\xce\x17\x54\x33\x95\xe7\xb3\x64\x14\x1c\x98\xd6\xec\xf0\xff\x25\xc4\xbb\xe0\x2e\xbe\x30\xf3\x03\xbc\x69\xe7\xa9\x51\x8f\xa7\xc9\x6a\x34\xc1\x95\x40\xb6\xc9\xc8\x02\xce\x9d\xca\x12\xf7\xa5\xf0\xd2\x06\xef\x8c\xed\x37\x22\xd9\xd4\x61\xe8\x6e\xa0\x52\x0e\x4a\x62\x6f\x4f\x95\xf2\x65\x38\x32\x3e\x0b\xfe\xa5\x36\x20\xe0\x76\xff\x22\x85\xfc\x6d\xd5\x43\xbc\xcd\xd1\x58\xad\x0e\xf5\xbe\x03\xfe\x2e\x2a\x4a\x19\x1b\xee\x20\x39\xf7\x54\xe9\x94\xd6\xec\x86\x59\x60\x9a\x4a\x5d\xc7\xf7\x0f\xa8\x4f\xe1\xe9\xb5\x73\x34\x6e\xf0\x60\x06\xf4\xab\xcb\x19\xc9\x2e\x12\x55\x95\xd7\xad\xaa\xce\xfd\xb0\x62\x71\x0c\x46\x15\x16\x34\x07\x1f\x12\x46\x73\x24\xe3\x20\xac\x81\xac\xcc\xaf\x2e\x62\x89\xa0\x7a\xba\x51\xdc\x3c\xaa\xbc\x86\x6d\x7f\x12\xf0\x3e\x33\xf7\x14\xe8\xe3\xa8\x7f\x55\xf0\xa8\x62\x2d\xd6\xa1\x28\xfc\xc1\xd5\xe8\x40\x11\x8f\x63\x78\xa7\x91\x59\x74\x11\x92\xdb\x8d\xd2\xe2\xcf\x56\x95\x25\x6f\xa4\xd4\x2d\x72\xb5\x97\x09\x33\xd6\xbf\x93\xf2\x0f\x82\xc6\x35\xcc\x87\x50\x20\xd1\xf7\x40\xd1\x81\x93\xc4\xd1\xa1\xef\xd8\xdb\xa9\xf3\xf7\xf7\x77\x03\xf0\x52\xd5\xad\x6a\x6e\x07\xe0\xb7\xf2\x70\x55\x56\xcd\xdb\x70\x91\x3e\x06\xf2\x95\x5c\xdb\x47\x9b\x4f\x72\xb0\x69\x86\xe6\x4e\xe8\x7d\x20\x94\x56\x7b\x7c\x14\x75\x0f\x30\x22\x04\x52\x99\x5d\x7a\x45\xbc\xca\x3a\x6d\xf3\xc2\x6d\x56\x1c\x13\xd6\xd4\x1e\x57\x97\xea\x65\xaa\x91\x07\x25\xd1\x1d\x52\x77\x1c\xad\x82\xa4\x8c\x3d\x97\x8b\x31\xdb\xda\x43\xf7\xb0\x57\x5e\x2b\x28\xdf\x13\x49\xd3\x22\x45\xc1\xf2\x1d\x6c\xa1\xea\x22\x59\xed\xe9\x4b\xe9\x68\x7f\x55\xf7\x4c\x85\xda\xc0\x78\x26\x24\x28\x0d\x46\x51\xfe\xa0\x5a\x5e\xbd\x61\x28\x5e\x28\xa8\xbd\x2c\xdf\x40\x94\x22\xd8\xaa\x18\xc1\x32\x21\xad\x33\xae\x86\x2b\x8e\xfb\xbd\xe8\xe5\x62\x59\x5c\x65\x57\xb7\xfc\xa5\x14\xe2\x26\x87\xd2\x5f\x53\xa2\x44\xbf\x8b\x36\xce\xfd\xbc\x38\xef\x16\xe7\xaa\xd2\xd3\x3f\x59\xf6\xce\x89\xd8\x0a\x24\x19\x5e\x03\x95\xbb\x9e\xc4\x6e\x50\x68\xff\x71\x7d\xf2\x7b\x07\xa7\xd4\x26\xea\x44\x5f\x29\x7b\x06\x4f\x6e\xef\xed\x7a\x8f\x7f\xd3\xbb\xe6\x6e\x8b\xd0\x8a\xcb\xee\x81\xa3\xf6\x58\xa2\xab\x5d\x4d\x38\xf5\x80\x81\xf2\x8e\xdd\x3b\xb9\xde\x3b\x9b\xfe\x9c\x5b\x60\x11\xbe\x3a\x6c\xa1\x71\xe7\x6d\xa1\x07\x4b\xfd\xb5\x4f\xe5\xa1\x13\xbe\x4c\x9b\xf4\x10\xb9\x23\xaa\xfe\x61\x80\x25\x89\xca\xa5\x6d\xc5\x54\x3f\x90\xc0\x8f\x97\x69\xa7\x31\x3c\x3d\x29\x30\xed\x6c\x1d\x86\x0f\xe6\x43\x0b\x3f\x96\x89\x3c\x7a\x3e\x09\x67\x27\xf7\x26\x64\xd2\x1e\xae\x9a\x37\x64\xce\x32\x27\x0f\x8c\x13\x58\x93\x15\x77\xa7\x2d\x15\x9e\xb5\x0e\xeb\x27\x2c\x7a\x11\x72\x21\x87\x2d\xb3\x1b\xd3\x66\x0e\xbe\x09\x83\x39\xc4\xa6\xf8\x19\x63\x60\x0c\x1d\x12\xd1\xbc\x11\x23\x09\x45\xbe\x7d\x80\x80\xde\x1b\xb3\xf0\xfe\x05\x59\xcb\xbc\xaa\x4d\xf0\x12\x67\x93\xc0\x28\xef\x18\xb6\xc3\x72\x92\x28\x05\xd6\xec\x54\xd7\xbc\x14\x73\x47\x12\xae\x15\x2d\x23\x6a\x4a\x52\xa3\xd3\x93\x86\xdb\xeb\x93\x83\x80\x4e\x5a\x5a\xd7\x07\xb9\xac\x48\x09\xdb\xb2\x95\x48\x85\x3d\xc0\x5a\xe9\xa1\xee\xb2\xa5\x41\x2a\xe4\xcd\xa9\x5f\x80\x9b\x6d\xef\x4f\x78\x4f\xfd\x38\xbd\xeb\x9a\xe1\xbe\xdb\x80\xe3\xeb\xa8\x3f\x55\x87\xc2\xa1\x93\x26\x99\xbe\x46\x7b\x17\x5e\xa3\xc0\x99\xf7\xdd\x5d\x16\xa6\xef\x71\x75\x56\xb0\xb4\x92\x63\x21\xe6\x1e\x2f\x17\x8c\x9e\x87\x7b\xe1\xea\x29\xe9\x66\xa8\xe1\x77\xdc\xc7\xd1\x71\xf4\xbf\x00\x00\x00\xff\xff\x46\x35\x63\xee\x91\x20\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0x9f, 0x9a, 0xaf, 0x63, 0x71, 0x8d, 0xb, 0x17, 0x39, 0xe, 0x7e, 0xac, 0xe8, 0xb5, 0xeb, 0xda, 0x3c, 0x58, 0x31, 0x0, 0xd7, 0x13, 0x65, 0xc8, 0xa, 0xe5, 0xfc, 0x62, 0x66, 0x8b, 0xb2}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x6f\xdc\xb6\x93\x7f\xbf\x9f\x62\xe0\x03\x02\x6f\x6e\x57\x72\xf2\x6f\x8d\xde\xa2\xdb\xc2\x8d\xe3\xd4\x87\x24\x67\x38\x4e\xef\x45\x11\xc4\x94\x34\xda\xe5\x85\x22\x55\x92\xf2\x7a\x1b\xe4\xbb\x1f\x66\x44\x3d\xad\x64\x27\x29\xee\xf2\x22\x59\x49\xe4\x3c\xfc\x38\xcf\x4c\xfc\xf4\xe9\x6c\x76\xb3\x95\x0e\x52\xa3\xbd\x15\xa9\x07\x59\x94\x0a\x0b\xd4\xde\x81\xdf\x22\x14\xe8\x45\x26\xbc\x00\xe7\x85\xce\x84\xcd\xa0\xb4\xa6\x34\x0e\xb3\x99\xd4\x70\xf1\xfa\xf2\x6a\x79\x72\xfa\xaf\xd3\x68\x36\xbb\xc6\x7c\x05\x5b\xef\x4b\xb7\x8a\xe3\x8d\xf4\xdb\x2a\x89\x52\x53\xc4\x46\xe7\xca\xec\x62\xfe\x2b\x51\x26\x89\x0b\xe1\x3c\xda\x38\x57\xb2\x74\xf1\xf3\x93\xe7\xcf\x4e\xfe\xe3\xd9\xe9\x52\xe7\x7e\xd9\x30\x8b\x8a\x6c\x36\x7b\xe7\x6d\x95\x7a\x07\x42\x67\x60\xd1\x99\xca\xa6\xe8\x20\x15\xba\x13\x11\x8c\x46\x30\x16\x0a\x63\x71\xd6\x4a\xea\xf7\x25\xba\x05\xa4\x42\x29\xcc\xe0\x4e\xe2\xce\x45\xf0\x52\xa4\x5b\xfe\xcd\x9f\xc1\x62\x69\xd1\x91\x96\x33\x01\x99\xcc\x73\xb4\x44\xef\x93\xd4\x19\x98\xbc\xd5\x7a\x01\xae\x4a\xb7\x20\x1c\x08\x48\x2d\x0a\x6f\x2c\x24\xd2\x6c\xac\x28\xb7\xfb\x99\xb1\x20\xe0\x3f\xaf\x5e\xbe\x02\x59\x88\x0d\x42\x2e\x15\x46\xb3\xa7\xf1\x6c\x26\x8b\xd2\x58\x0f\x17\x95\xde\xc8\x44\xe1\x8d\xf9\x84\x1a\x72\x6b\x0a\x38\xb9\x47\xfc\xe9\xf9\x4f\x3f\x9e\x26\xf9\xf3\x13\x7c\x2e\xc4\xe9\x6c\x56\x56\x49\x87\xff\x9b\xc0\xfa\x0f\x92\x1b\x3e\xcf\x66\x00\x00\x71\x1c\xc3\x19\x5c\xa3\x33\xea\x0e\x2d\x1d\xc1\x9d\xcc\xd0\x81\x48\x53\x74\x0e\xbc\x01\x01\x0e\x7d\x5f\xf4\xa0\x78\xb3\xbd\x47\xc6\x31\xb0\x84\x5b\x03\x2b\x1c\x63\xb4\x89\x40\x68\x78\x7b\x71\x33\x3f\xc0\xd8\x93\x79\x48\xed\xd1\xe6\x22\xc5\x96\x8e\x37\x8d\x18\x3d\x29\xc8\x62\x98\x2f\xf8\xad\xf0\x20\x3d\xb8\xaa\x24\x28\x0e\x04\x21\x8d\x5b\xe6\x2d\xed\x4e\xc1\xcf\xbc\xaa\x59\x99\x57\x1a\x36\xe8\x19\x91\xe3\xf9\x0a\xfe\xbc\xd9\x97\xf8\x61\xb4\xc4\xd6\xbb\x69\xd9\xf1\x47\x16\x63\x05\xb4\x72\xbe\x82\x33\xbd\xaf\xcd\xe9\x57\xde\xf5\x65\x0a\xd5\x17\x46\x29\x4c\xbd\x34\x1a\x24\x9d\xf7\xc6\x9a\xaa\x24\x44\xd9\x6a\x02\x71\x4b\x50\x64\x78\x0f\xc9\x1e\x2e\xcf\xbf\x4b\xa9\x1e\xfd\xb1\x7a\x89\xb1\xd6\xec\x48\xf4\x66\xf9\xb1\xcc\x56\xf0\xfe\x52\xfb\xd3\x1f\xe6\x2b\x78\xf2\xb9\x79\xff\x65\x0a\x9a\xcb\xf3\x1a\x98\x7a\xfd\x87\x43\x25\xcf\xa5\x2b\x95\xd8\xd7\x7a\x25\xc2\xc9\x34\xb8\x02\x1f\x92\x4e\x55\x45\xc6\x44\x87\xa7\x45\x81\x0b\xc8\xd0\xa5\x56\x96\x2c\xab\xd0\x59\x77\xe6\xdb\xaa\x48\xb4\x90\x0a\x72\xb2\x7d\x0d\x26\xf9\x1f\x4c\x7d\x04\x6f\x8c\xf3\xe1\xc1\x81\xdb\x9a\x4a\x65\x87\x16\x44\x0c\xc7\x78\x05\x5b\x6c\x04\x0c\xe6\xde\xf0\xbb\x09\x12\xd1\x29\x90\x74\x0d\xbb\xfe\xa2\x83\x0d\xd2\x41\x2e\x51\x65\xb0\x93\x4a\x41\x82\x90\xd5\xa4\x31\x03\xa9\x41\x49\x17\x22\x8a\xdf\xa2\xc5\xdc\x58\x0c\xe2\x0e\xc8\x24\xfc\xd6\x7a\x52\x31\x35\x3a\x95\x0e\xa3\x49\x9e\xa4\x82\x42\xcf\x42\xae\xe0\x9d\xb7\x52\x6f\x86\x2a\x9c\xc1\xce\x4a\xef\x51\x0f\x40\xfd\xbf\xd2\x47\x40\x86\x5e\xc8\x26\xce\x0d\xe9\x2e\x06\xa4\x9c\x61\xbf\x4e\x90\xa3\x25\xdc\xa1\x4d\x8c\x6b\x3d\x1f\x4a\x61\x05\x87\x35\x90\xda\x79\x14\x1c\x06\x05\x38\xa9\x37\x0a\x41\x49\x8d\xf3\xc7\x21\xe8\xa9\xf7\x10\x12\xae\x10\x4a\xf5\x8c\xa8\x0d\xc2\x62\x02\x94\x6f\xc1\x24\x58\x5a\x82\x20\x60\x87\xc9\x32\xb7\x12\x75\xa6\xf6\x1c\x89\xe1\x58\x46\xc8\xe1\x79\x01\x57\x6f\x5f\xcd\x07\x44\xd8\xf2\x03\x1e\x63\x0b\x59\x90\xc2\x9f\xa0\xb4\xc8\xc1\x6c\x01\xe8\xd3\xc7\xb5\x6f\x95\xea\xc5\x9a\xcf\x17\x52\xe1\x97\x0e\x04\xa9\xa5\x3f\x6e\x9f\xe8\x4f\xdf\x6c\x16\x83\x2f\x13\x68\x0e\x17\x3c\xc2\xb0\x59\x32\xef\xc5\x19\xfa\xe3\x50\xe5\x11\xbb\xd3\x9a\x39\x8f\x3f\xf6\x4d\x74\xdd\x97\x61\xbc\xb4\x3b\xc5\x75\x27\x4b\xbb\xec\xcb\x61\x04\x22\xc9\x42\x58\x45\x8d\x56\xa6\xbd\x00\xc9\x67\xd1\x25\x64\x10\xf5\xf1\x39\x6f\x2c\x66\x40\x86\x61\xc1\xe4\x39\xa4\x5b\x21\xf5\x38\xa1\x11\x69\xd7\x9c\x65\xe5\x30\xa3\x44\x64\x91\x33\x3a\x55\x0c\x9c\x9b\xdd\x02\x28\x55\x99\xda\xf9\x0d\x79\x3f\x14\x98\x49\xf1\x60\x48\xea\xe4\x63\xd9\xc7\x21\xbb\xb2\x92\x62\x6e\x30\xf5\x03\x7d\x7f\xbf\xb9\xb9\xea\x74\x66\x7d\xea\x60\xdb\xe4\x6c\x2a\x0b\x40\x70\x84\xa1\xb5\x70\x6c\x2c\xff\x78\x37\x87\xf7\xd7\xaf\x43\x48\x98\x10\xab\x21\xbc\x9a\x12\x8b\x2c\xb1\xb2\x6a\xec\x7f\x6c\x7a\xbd\x2f\x93\xa6\x51\x59\x3a\xcc\xca\xf6\x8f\xf1\x71\xad\x0f\xa8\x58\xf4\x95\xd5\x2d\xb1\x87\xad\xe1\xf2\xea\xe2\x1d\x8b\x5f\xef\x20\x88\x3a\x7b\x0a\xb5\x54\x3f\xc1\xb4\x1b\x83\x4d\x50\x3d\xa6\x7b\x45\x17\x39\x2e\xd1\x1c\x1b\x07\xbd\x0d\x16\x00\xc2\x62\x67\x17\x19\x65\x70\xbf\x45\x69\xb9\xf4\xa2\x34\x25\x33\xd4\x5e\xe6\x12\x2d\x1c\xbf\xb8\x3c\x9f\xb7\x44\xac\x60\x7b\xf1\x5b\xc1\x11\x57\x5a\x4c\x3d\xbc\xbf\xbe\x8c\xe0\x0c\x52\x25\x69\xaf\x28\x4b\x25\xd3\x3a\x8e\x91\x29\x56\x0e\xeb\xb4\xf7\xe2\xf2\xbc\x5f\x32\xe5\x54\x60\x92\x09\x2a\x23\x38\x09\x05\x2d\xee\xa4\x20\x95\x58\xdc\x8d\xf0\xb8\x13\xfb\x07\x2d\xb3\x41\xaf\x35\x81\x41\x64\x7b\x71\x79\x4e\x56\x46\xa4\x27\x14\x23\x58\x59\x2e\xe6\x54\x17\xac\xbd\xdd\x03\x4a\x83\x82\x3e\x33\xa9\x8b\x64\x99\xbb\x48\x9a\x98\x72\x22\x96\xde\xc5\x81\xc3\x52\x64\x99\x25\xa3\xd6\x9b\xf8\xd1\x30\x99\x52\x51\x33\x95\x1c\xae\x84\xdf\xb2\x73\x68\x30\x1c\x71\x84\x82\x92\xde\x85\xa2\x32\xaf\xad\xa5\x2d\xae\x5a\xb0\xea\xd3\x30\x76\xff\x4d\x09\x43\x3a\x30\x5a\xed\x41\x23\x66\x14\xef\xf3\x8e\x38\x17\xb9\x8e\xcb\xd9\x6f\x21\xfa\x0d\xe0\x10\xd9\xa5\xdb\x3b\x8f\x85\x7b\x1c\x16\xd2\xb4\xc1\xe5\xd7\x03\xaf\xed\x41\xb6\x18\x2e\x9c\x74\xe2\x54\x66\xb0\x26\x9c\xc7\x9f\x18\xcf\x35\xd3\x98\xf2\xf0\x0e\xaa\x4a\xd7\x65\x6a\xe3\x9d\x84\x11\x83\xad\x85\x97\x77\x48\x01\xaa\x33\xa4\x7f\x6a\x43\x5b\xb3\x5b\x7a\x13\x07\xcb\x59\xd2\xeb\xa5\xd1\xcb\x1d\x26\xf1\xbf\xd5\x7c\x96\x95\x55\xee\x41\xdc\xbe\x16\x8c\x64\xde\x42\x0b\xeb\x1e\x00\xc3\x55\xd0\x85\xad\x23\x12\x61\x15\xc7\x47\x11\x9d\xa0\xf0\xc7\x0d\x9e\xf3\xe6\xc5\x51\x7c\xd4\xfe\x26\x5a\xf3\x01\xa9\x1e\x94\xdf\x44\xf5\x81\xf0\xf8\x94\xff\x79\x0a\x70\x6d\xf6\x42\xf9\x3d\x70\xdb\xd3\xbc\x3c\xc7\x5c\x6a\x6c\xdc\xbb\x28\x8d\x13\x94\x48\x6c\x58\xdb\x36\xe9\x9c\x6c\x36\xf2\x0e\x1d\x14\xc2\x7e\x42\x5f\x2a\x41\xc9\x50\x40\xa5\x29\x12\x64\x07\x1d\xdd\x53\x20\x4f\x0b\xcd\x1a\x75\x81\x81\xa4\xc4\xd0\xb9\xb5\x62\xbd\xe9\x93\xa3\x50\xf7\x57\x85\x76\x5f\xdb\xc2\xed\x75\xb3\xe9\xb6\x09\x56\xdc\xf4\xbe\xbd\xb8\x71\xd0\x10\xa0\xe8\x47\xa1\x18\xef\x4b\x4c\x7d\x9d\xae\x4b\xb1\xef\x18\x52\x87\x52\x27\x7e\xbf\x45\x87\xe0\x4a\x4c\x65\x1e\xa2\xeb\x50\x9c\x51\x6c\x6c\x05\x38\x0c\x8b\x67\xd6\x8a\x7d\x0d\x0b\xf5\xd9\x9f\x6a\x08\xa5\xce\xe4\x9d\xcc\x2a\xa1\x3a\xf6\xed\xb6\x3a\x51\xf3\x81\xcd\xeb\xe8\x55\xf9\x4b\x9d\x1b\xb7\x82\x3f\xc3\xe1\x7c\x18\x26\x48\x76\xd8\x8f\x53\xeb\x0e\x7d\x35\x8e\xe1\x0f\xa1\x64\x26\x7c\x28\x0c\x5c\x55\x70\xc5\xad\x14\x6d\x87\xa2\x52\x5e\x96\x4a\x52\xc3\x19\xaa\x5c\x6d\x3c\x55\x38\x1b\x8b\xc2\x37\xd9\xe8\x59\x74\x32\x20\x7b\x27\x2c\x78\xe3\x85\x7a\x51\x79\x58\xc3\xc9\xc1\x67\x72\xda\xc6\x54\xa4\x6e\xe5\x9c\xf0\x89\x1e\x91\xf6\xe7\xbf\x37\x7b\xa3\xb4\xf2\x07\xa6\xdf\x7f\x12\xce\xa1\xf5\xc7\xed\xbe\x9f\xd7\x24\xe7\x02\x0a\x74\x4e\x6c\x70\x05\x47\xef\x6a\x65\x5b\xfe\xdf\xae\xed\xd1\xfc\x10\xc6\x33\xe7\xe4\x46\xd7\x0e\x11\xe8\x4d\x44\xc5\x86\xd3\x7a\xbc\xe8\x20\x04\x5e\xd7\x7e\xdb\xa7\xc7\x4d\xc1\x54\xdb\xdd\x5a\x1b\x37\xdf\xcd\x59\x3f\x52\x15\x4d\x30\x87\x61\x69\x54\x57\xf2\xec\x8c\x54\xeb\x84\xfe\xce\x0d\xba\xb1\xe6\x08\xc9\x50\xb8\x4e\x62\x4f\xe7\xe1\xcd\xb4\x3f\x8c\x1a\xeb\x57\xa1\x08\x1f\x0e\xa8\xae\x31\x45\x79\xd7\x56\x09\x08\x09\x6a\xcc\x65\x2a\x85\xdd\x37\xdd\x59\xe0\x3d\x2c\x39\x04\xa3\xd1\xd4\x1c\xa9\x45\xb2\xea\x7d\xd9\xf6\xed\xb6\x21\xbc\x93\x7e\xdb\x3e\x45\x1b\xf4\x37\xfb\x12\x8f\xe7\x07\x07\x90\x9a\xa2\x40\x9d\xd5\xd5\xd4\x12\xde\xbb\x9e\x5d\xf0\x14\x8e\x72\xb4\xc6\x5d\xdd\xa5\xd5\x08\x5c\x28\xb3\xab\xb5\xb0\x43\x2d\xa4\x83\x8a\x70\x83\xdb\xf6\xc0\xf6\x8d\xa2\x57\x55\xa2\x64\x4a\xb5\xc7\xf1\xfc\x76\xd8\x2e\x53\x94\x22\x1b\xac\x0b\x39\x3a\x87\x5c\x54\xca\x4f\xf0\x89\xc6\x19\x94\x7b\x75\xa1\x94\xd9\xd1\x7e\xcb\xa3\xb1\xaa\x0c\xce\x8e\x90\x8a\x52\x24\x52\xc9\xda\x0b\xb9\x02\xa9\x7c\x65\x91\x97\x39\x52\x8e\x5b\xf4\xa6\x53\xea\x96\x8f\x0a\x87\x46\x86\x15\xbc\x68\x17\xfd\xfc\xe4\x4c\xef\xaf\x43\xa9\xf4\x79\x70\xc2\x51\xa3\xf8\x97\x5f\x86\xf6\xf0\xa6\x75\xc0\xb6\x83\x4a\x85\x4a\x2b\xd5\x88\x2c\x0a\x53\x69\x9e\x2f\x3a\xa1\x10\xee\x84\xaa\x90\x02\xa9\x76\x39\x5a\x1b\x7a\xae\x60\x6b\xd3\xc0\xbc\x35\x1e\x61\x09\x97\xbe\xd7\xb5\x27\xe8\x77\x88\x9a\xe2\x14\x03\xfe\x2c\x3a\x19\xcc\x42\xe0\xe5\x3d\x6d\xa9\x8d\xa8\xc7\x58\x3a\xb8\xe7\x0d\x5d\xe0\xa0\x77\x27\xd1\x8f\xa7\xb4\x54\xf7\x2d\x35\x6c\xd9\x35\x3c\x79\xd1\x53\xb8\x7f\xb8\x66\x61\xe7\x10\x4a\xed\xa1\x44\x9b\xa2\xf6\x54\xa0\x6f\xb0\xd7\xa3\xd6\xa3\x02\x8f\xb6\x60\xc7\x4c\x84\x93\x0e\x4a\x23\xb5\x1f\xd4\x2b\xb4\xc8\x19\x25\x33\x3a\xe9\x3a\xa9\xb9\x42\x58\xdf\x0e\x7b\x1d\xec\xb6\x54\x7b\xa6\x22\xa3\x9e\x84\xba\x5c\xb2\x96\xdb\xf7\x17\xf2\xfe\xf4\x87\xdb\x3a\x33\x08\x65\x51\x64\xfb\x76\x92\x7a\x30\xc7\xc0\x01\x7b\xb6\x9f\x54\x38\xc2\x36\x15\xf4\x20\xbd\x03\x53\xa2\xad\xb3\xe7\xd0\xc6\x29\x0b\x6b\x2f\x2d\xaa\x3d\x05\x1a\xb4\x85\xd4\xd2\xf9\xd0\x9d\x6f\xd0\xf6\x76\x32\xde\x4d\x81\x50\x95\x74\xe0\x3f\x35\x4c\x4d\x0e\xa5\xc5\x54\x3a\x69\x74\x34\x2e\xfa\x2b\xbf\x82\x5a\xa5\xa1\xd5\xfd\x57\x53\xe9\x0f\xa6\x1d\xf5\x75\x44\xdd\xce\xd7\xde\x42\x6a\x10\x0b\xb1\x27\x3f\xee\x9d\xed\x62\x84\x85\x45\x55\x8b\xbb\x95\x65\x6b\x5e\xf4\xe1\x76\x27\x94\x42\x7f\xdb\x0c\xff\x28\x58\x2e\x80\x9b\xcc\xbd\xdf\x12\x5d\x54\x2e\xe4\x62\x9e\x42\xed\x34\x5a\x28\xe4\x66\xeb\x61\x27\x74\x1d\x91\xb9\x10\x19\x7b\xe1\xa3\xa3\x2f\xae\x09\xc8\x25\x4a\x6a\x14\xbf\xdf\x51\x17\x7d\xfc\x16\x53\xbc\x0e\x6b\x8b\xd2\xe2\x44\x46\xa7\x64\xf1\x0b\x97\x04\xf0\xe4\x09\x3f\xd5\x79\x19\x56\x70\x44\x59\xba\x76\x93\xce\x37\xa5\xa6\x57\x32\x03\x2b\xf4\x06\x41\x46\x08\x7f\x9e\x2c\x9e\x7d\x38\x7a\x24\xf3\x73\x8e\x6b\xe3\xef\x1a\x5a\xb5\x27\x33\x72\x9d\x8c\xff\xc9\x14\x6a\x94\x35\x5f\x85\xec\x53\xb7\x8c\x5c\x4f\xb5\x8a\x70\x40\xe3\xca\x87\x05\xa3\xa3\x1e\xd6\x7a\x6d\xd8\xe6\x59\x4d\x47\x82\xa3\x38\xde\xa1\xf6\x15\x47\x83\x3e\xad\x6e\x8e\xe5\x76\xd2\xa7\xdb\xc4\x50\xd5\xdd\xa8\xbe\x68\xe9\x6e\xd9\xaf\x9b\xc9\x3a\x24\x55\x20\xcb\x5d\xe8\x40\xb8\xb6\x70\xa5\x27\x6d\xc2\xac\x7c\x54\x6c\x4c\xe6\xae\x15\x74\x4f\xbd\xa3\x0f\x95\x47\x5c\xf2\xc7\x38\x24\xfd\x8b\x9b\x86\xc4\x10\x45\x38\x0b\x97\x02\xa6\x0b\x74\xf0\x06\x33\x29\x16\xcd\x08\x8b\xd3\x37\xcf\xc4\xad\x45\x57\x1a\x99\x11\x9a\x3c\x47\xa3\x44\x1e\x1d\x56\x1f\xbc\x7b\x62\x46\x95\xf3\xf4\xe2\xc1\x41\x69\x1c\xd7\x34\x97\x5c\x43\xa4\xa6\x40\x17\xba\x01\x02\x87\x4b\x47\xfa\x12\xbb\x2a\xe1\x15\xc2\x05\x2b\x49\x30\x83\x2d\x5a\xec\x3a\x4e\xbc\x43\x45\x31\x2c\x2a\xcc\xdf\x52\x29\x11\x19\xbb\x89\x51\x2f\xdf\xbf\xe3\x6e\x34\xfe\x6f\x4c\xe2\xdf\x6f\x6e\xae\xe2\xdf\x84\x93\xa9\xfb\x68\xf2\x8f\xfc\xf8\xe6\xf2\xcd\xcb\x8f\x7c\x91\x38\x12\xbe\x55\xf7\x01\x5f\x9f\x54\x6e\x31\xde\x36\x74\x5b\xb6\x7c\xda\xba\xa6\xbf\x0e\x3f\xb4\x9b\xd7\xed\xaf\x87\x9c\x01\xce\x40\xc9\x14\xb5\xe3\x7b\x39\x63\xf9\x88\xbc\x69\x21\x71\x65\x76\xcf\x28\x84\x55\xae\x19\x96\x35\xfb\x6f\x9a\xdb\x9a\xc1\x4c\x35\x8c\x4a\x9a\x91\x12\x95\xa3\x5c\x70\x92\xd3\x04\x4a\x59\x98\x5a\xf6\x0c\xe0\x75\x90\x64\x6c\x02\x24\xc6\x65\x3b\x97\x7a\x00\xca\x8f\xbd\xd1\xd5\xa3\xa3\xcb\x21\x35\x58\xf7\xf6\x3d\x82\x53\x63\xee\x78\x5f\x1a\x2e\xbb\xde\x5f\xbf\xae\x07\x4e\x14\x0c\x3c\x16\xc0\xf7\x5f\x80\xf7\x1e\x2d\xe5\x29\x27\x3d\x46\x53\x70\xf5\x91\x4a\xf6\xfd\x69\x20\xa1\xf3\x09\x21\x6a\x07\x7f\xbf\x29\x93\x12\x0f\xd3\x0c\x12\xdb\x0a\x91\xd3\x8e\x95\x1b\x49\xac\xba\xd2\x96\x61\x1e\xb9\xd6\xcb\x20\x13\x89\xfc\x3d\x43\xe0\x8f\xf0\x0d\x63\xe0\xf5\x23\xd3\xdb\x31\x6e\x75\x23\x4d\x9e\x59\x57\xec\x61\xb8\x46\x09\x73\x6b\x76\x5c\x8c\x30\xa2\x64\x2d\x69\x7b\x09\xfa\xbd\x30\x7a\xc3\x5d\x0e\x4f\x08\xef\xd0\xb2\x0c\x84\x27\x5f\x5a\xc9\xd4\x35\xbd\xc6\x24\x97\x4e\x80\x04\x95\xd1\x1b\x22\x37\x82\xf4\xed\xc5\x4d\x77\x47\xdb\xdd\x48\xf6\xa2\xd2\x5b\x8a\xe1\x53\xe9\x65\x47\x45\x67\xb8\x47\xaa\x6b\x94\x91\xbe\xe3\xba\xe8\xa1\x4b\x43\x38\xef\x25\xc0\x29\x6e\x53\x50\xb0\xf6\xfc\xff\x38\x1e\x66\xf8\x95\x2b\xba\xd6\xa6\x6a\xe3\xe3\xff\x54\x10\x3c\x82\x59\x70\x53\xd2\x3f\x68\x91\x98\xca\x7f\x9d\x2d\x76\xa6\xba\xea\xdb\xed\x80\xf7\xbb\xbf\x2a\x61\x71\xe9\xe4\xdf\x14\x6c\x78\x26\x3e\x48\x44\x5f\xe5\xe2\x98\xc0\x65\xc1\x13\x06\x4e\x3c\x03\xfa\xbf\x09\xad\xd1\x0e\xe8\xb7\xfd\x61\x47\x76\x41\x29\xbc\xee\x3e\x6b\x9c\xb7\x82\x70\x06\xda\x06\x1a\x85\x85\x67\xcf\x4f\x4e\xee\x4f\xff\x75\x32\x16\x20\x61\x0e\xd3\x02\xb0\xeb\x0d\x6e\xfb\x26\x6f\xf8\x1e\x84\x6a\x31\xa1\xde\x62\x82\xe3\xff\xeb\x95\x5f\x4f\x38\x58\xf7\x45\x9d\x88\xc7\x9d\xb4\xb0\xee\xcb\x3e\x5e\xda\x53\x02\xd6\x7d\x95\x46\x01\xe8\xcb\xec\x7f\x03\x00\x00\xff\xff\x83\x88\x23\x71\xaf\x24\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x11, 0x6b, 0x42, 0xda, 0xe9, 0x75, 0x33, 0x52, 0xe5, 0xa1, 0xef, 0x35, 0xc1, 0xe4, 0x15, 0xa2, 0x3e, 0xcc, 0x9b, 0x8d, 0x93, 0x32, 0x50, 0xd, 0x70, 0x60, 0x42, 0xf4, 0x13, 0x1c, 0x16}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
